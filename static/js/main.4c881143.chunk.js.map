{"version":3,"sources":["components/Drawer/Drawer.js","components/Header/Header.js","components/InlineToolbar/components/Alignment/Alignment.js","components/InlineToolbar/components/TopRightButtons/TopRightButtons.js","components/InlineToolbar/components/Formats/Formats.js","components/InlineToolbar/components/FontSize/FontSize.js","components/InlineToolbar/components/FontColor/FontColor.js","components/InlineToolbar/components/Highlighter/Highlighter.js","components/InlineToolbar/InlineToolbar.js","components/StaticToolbar/StaticToolbar.js","components/AlignmentToolbar/AlignmentToolbar.js","container/App.js","index.js"],"names":["Drawer","notes","drawerOpen","toggleDrawer","onClickClearNotes","onClickDeleteNote","onClickOpenNote","handleToggleLock","handleCheckNote","open","onClose","Box","role","m","style","width","display","alignItems","justifyContent","Typography","variant","Button","aria-label","color","onMouseDown","List","mt","mb","ListItem","selected","button","onClick","ListItemText","primary","ListItemSecondaryAction","IconButton","edge","map","note","key","id","divider","titleDrawer","secondary","date","locked","useStyles","makeStyles","theme","SuccessButton","borderColor","Header","editMode","currentNote","onClickSave","onClickEditMode","onClickCancelEditor","onClickToggleLock","Style","React","useState","title","setTitle","setDrawerOpen","setOpen","dialogType","setDialogType","type","setType","currentNoteChosen","setCurrentNoteChosen","password","setPassword","itemId","setItemId","error","setError","calcLength","length","handleTitleChange","event","target","value","handleTitleMaxLength","handleCloseDialog","Fragment","Paper","Toolbar","Hidden","smUp","TextField","onChange","onKeyDown","fullWidth","margin","name","placeholder","xsDown","flex","ml","mr","className","disabled","checkType","Dialog","keepMounted","aria-labelledby","aria-describedby","DialogTitle","DialogContent","autoFocus","label","required","DialogContentText","DialogActions","Alignment","StyleButton","contentBlock","onClickToggleBlockStyle","alignmentTypes","leftActive","centeredActive","rightActive","forEach","item","alignmentType","index","currentFormat","itemText","preventDefault","Tooltip","placement","size","TopRightButtons","anchorKey","onClickRemoveLastFormat","onClickToggleLink","url","setURL","handleClose","Formats","currentSelectionAnchorOffset","onClickToggleStyle","types","stylesArray","getInlineStyleAt","boldActive","italicActive","underlineActive","strikethroughActive","uppercaseActive","checkStyle","format","formatStyle","find","FontSize","fontSizes","fontSizeActive","setFontSizeActive","useEffect","font","fontSize","minWidth","FontColor","fontColors","fontColorActive","setFontColorActive","checkItem","maxWidth","Highlighter","highlighterColors","highlighterActive","setHighlighterActive","height","spacing","padding","border","palette","borderRadius","shape","flexDirection","boxShadow","Divider","alignSelf","Caption","textAlign","ColorContainer","flexWrap","InlineToolbar","editorState","handleCursorSetAtEnd","anchorEl","setAnchorEl","newtimeoutCount","setNewtimeoutCount","Boolean","selectionState","getSelection","currentSelectionCollapsed","isCollapsed","currentSelectionAnchorKey","getAnchorKey","getAnchorOffset","currentSelectionFocusOffset","getFocusOffset","getCurrentContent","getBlockForKey","contentBlockLength","getLength","selectionStateStart","getStartOffset","selectionStateEnd","getEndOffset","timeoutCount","Math","round","setTimeout","parentElement","Array","from","document","querySelectorAll","dataset","offsetKey","split","Popover","anchorOrigin","vertical","horizontal","transformOrigin","onExiting","elevation","marginThreshold","TransitionComponent","Fade","transitionDuration","Grid","container","direction","justify","disableGutters","marginTop","minHeight","StaticToolbar","onClickUndo","onClickRedo","onClickToggleImageUrl","onClickClearEditor","onClickInsertCanvas","hidden","setHidden","undo","setUndo","redo","setRedo","undoStack","getUndoStack","redoStack","getRedoStack","marginLeft","orientation","AlignmentToolbar","imageAlignmentType","onClickSetImageAlignment","handleCloseAnchorEL","currentSelectionHasFocus","getHasFocus","getAttribute","createMuiTheme","main","success","focusPlugin","createFocusPlugin","resizeablePlugin","createResizeablePlugin","decorator","composeDecorators","plugins","createImagePlugin","App","props","handleEditorChange","setState","handleEditorFocus","editor","focus","onEditorTab","state","newContentState","Modifier","replaceText","EditorState","push","handleClickEditMode","handleToggleBlockStyle","block","RichUtils","toggleBlockType","handleToggleStyle","includes","handleToggleRemoveStyle","toggleInlineStyle","previousStyle","currentEditorState","fontColor","highlighterColor","contentState","removePreviousStyle","removeInlineStyle","removePreviousStyleBlock","getBlockMap","newInlineStyle","mergeBlockData","newEditorState","handleToggleApplyStyle","applyNewStyle","applyInlineStyle","applyNewStyleBlock","updateEditorState","moveFocusToEnd","handleClickClearEditor","previousEditorState","createEmpty","newBlock","handleClickRemoveLastFormat","convertToRaw","blocks","inlineStyleRanges","removeStyle","removeStyleBlock","setBlockData","handleClickToggleLink","contentWithEntity","createEntity","entityKey","getLastCreatedEntityKey","toggleLink","handleClickToggleImageUrl","handleInsertImage","handleClickSetImageAlignment","handleClickSave","titleParam","drawerTitle","Date","currentNotes","newCurrentNote","noteData","contentTextArray","text","newTitle","slice","join","newNote","day","getDate","month","getMonth","year","getFullYear","fullDate","newNotes","random","data","localStorage","setItem","JSON","stringify","handleClickClearNotes","removeItem","handleClickToggleLock","handleClickDeleteNote","filter","handleClickOpenNote","convertFromRaw","createWithContent","undoRedoMethod","handleUndo","handleRedo","blockStyles","getType","undefined","keyBindingFn","KeyBindingUtil","hasCommandModifier","keyCode","shiftKey","console","log","getDefaultKeyBinding","handleKeyCommand","command","CompositeDecorator","strategy","findLinkEntities","component","Link","setNotes","parse","getItem","this","CssBaseline","ThemeProvider","Container","customStyleMap","inlineStyles","blockStyleFn","onFocus","onTab","ref","element","readOnly","spellCheck","Component","textTransform","background","callback","findEntityRanges","character","getEntity","getData","href","rel","children","contentStateWithEntity","src","set","currentContent","AtomicBlockUtils","insertAtomicBlock","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4c881143.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// Components\r\n\r\n// Material UI Components\r\nimport { Drawer as DrawerComponent, List, ListItem, ListItemText, Typography, Box, Button, IconButton, ListItemSecondaryAction} from '@material-ui/core';\r\n\r\n// Icons\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\n\r\nexport default function Drawer( {notes, drawerOpen, toggleDrawer, onClickClearNotes , onClickDeleteNote, onClickOpenNote, handleToggleLock, handleCheckNote} ){           \r\n    return (\r\n        <DrawerComponent open={drawerOpen} onClose={toggleDrawer()}>\r\n            <Box\r\n                role=\"presentation\"\r\n                m={2}\r\n                style={{width: \"250px\"}}\r\n                >\r\n                <div style={{display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\"}}>\r\n                    <Typography variant=\"h6\">My Notes</Typography>\r\n                    <Button \r\n                        aria-label=\"Clear\" \r\n                        color=\"secondary\"\r\n                        variant=\"outlined\"\r\n                        onMouseDown={() => onClickClearNotes()}>\r\n                        Clear\r\n                    </Button>\r\n                </div>\r\n                <List>\r\n                    <Box mt={1} mb={1}>\r\n                        <ListItem selected button onClick={() => onClickOpenNote(\"New\")} onMouseDown={toggleDrawer()}>\r\n                            <ListItemText primary={\"New Note\"} />\r\n                            <ListItemSecondaryAction>\r\n                                <IconButton edge=\"end\" aria-label=\"New Note\" onClick={() => onClickOpenNote(\"New\")} onMouseDown={toggleDrawer()}>\r\n                                    <AddCircleIcon />\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    </Box>\r\n                    {\r\n                        notes.map(note => {\r\n                            return(\r\n                                <ListItem key={note.id} divider button onClick={() => handleCheckNote(note)} onMouseDown={toggleDrawer()}>\r\n                                    <ListItemText primary={note.titleDrawer} secondary={note.date} />\r\n                                    <ListItemSecondaryAction>\r\n                                        <IconButton edge=\"end\" aria-label={note.locked === true ? \"Locked Note\" : \"Unlocked Note\"} onClick={note.locked === true ? () => handleToggleLock(note, \"turnOff\") : () => handleToggleLock(note, \"turnOn\")}>\r\n                                            {\r\n                                                note.locked === true ? <LockIcon /> : <LockOpenIcon />\r\n                                            }\r\n                                        </IconButton>\r\n                                        <IconButton edge=\"end\" aria-label=\"Delete Note\" onClick={() => onClickDeleteNote(note.id)} onMouseDown={toggleDrawer()} color=\"secondary\">\r\n                                            <DeleteIcon />\r\n                                        </IconButton>\r\n                                    </ListItemSecondaryAction>\r\n                                </ListItem>\r\n                            );\r\n                        })\r\n                    }\r\n                </List>\r\n            </Box>\r\n        </DrawerComponent>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n// Components\r\nimport Drawer from '../Drawer/Drawer';\r\n\r\n// Material UI Components\r\nimport { Paper, Toolbar, IconButton, TextField, Typography, Box, Button, Hidden, Dialog, DialogTitle, DialogContent, DialogActions, DialogContentText } from '@material-ui/core';\r\n\r\n// Icons\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\n// Material UI Custom Style\r\nconst useStyles = makeStyles(theme => ({\r\n    SuccessButton: {\r\n        borderColor: \"#27AE60\",\r\n        color: \"#27AE60\"\r\n    },\r\n}));\r\n\r\nexport default function Header( {editMode, currentNote, notes, onClickSave, onClickEditMode, onClickCancelEditor, onClickClearNotes, onClickToggleLock, onClickDeleteNote, onClickOpenNote} ) {\r\n    const Style = useStyles();\r\n    const [title, setTitle] = React.useState(\"New Note\");\r\n    const [drawerOpen, setDrawerOpen] = React.useState(false);\r\n\r\n    // Dialog\r\n    const [open, setOpen] = React.useState(false);\r\n    const [dialogType, setDialogType] = React.useState(\"\");\r\n    const [type, setType] = React.useState(\"\");\r\n    const [currentNoteChosen, setCurrentNoteChosen] = React.useState(null);\r\n    const [password, setPassword] = React.useState('');\r\n    const [itemId, setItemId] = React.useState(null);\r\n    const [error, setError] = React.useState(false);\r\n\r\n    // This method will calculate the length of the title to either display the shorter version or the longer version.    \r\n    const calcLength = (type) => {\r\n        if(type.length > 12){\r\n            return currentNote === null ? title : currentNote.titleDrawer\r\n        }else{\r\n            return currentNote === null ? title : currentNote.title\r\n        }\r\n    }\r\n\r\n    // This method will save whatever the user types into the title state\r\n    const handleTitleChange = (event) => {\r\n        if(title.length > 18){\r\n            return\r\n        }else{\r\n            setTitle(event.target.value);\r\n        }\r\n    }\r\n\r\n    // This method will handle the title if the user types a title that is longer than 18 characters long a message will display\r\n    const handleTitleMaxLength = (event) => {\r\n        if(title.length > 18){\r\n            if(event.key === \"Backspace\" || event.key === \"Delete\"){\r\n                setTitle(\"\");\r\n                event.target.value = \"\";\r\n            }else{\r\n                event.target.value = \"Limit of 18 Characters reached.\";\r\n                return\r\n            }\r\n        }else{\r\n            return\r\n        }\r\n    }\r\n\r\n    // This method will handle whenever the trash can icon is pressed. It will promt to user to decide whether or not the note is to be deleted\r\n    const handleDeleteNote = (id) =>{\r\n        setOpen(true);\r\n        setItemId(id)\r\n        setDialogType(\"Delete\");\r\n    }\r\n\r\n    /* \r\n        This method will handle whenever the save button is pressed. Will set the title to whatever the user typed \r\n        or to first word if left empty\r\n    */\r\n    const handleSaveButtonAndTitle = () => {\r\n        if(currentNote !== null && (title === \"New Note\" || title === \"\")){\r\n            onClickSave(currentNote.title);\r\n        }else{\r\n            onClickSave(title);\r\n        }\r\n    }\r\n\r\n    // This will toggle the drawer meaning it wil either open/close the drawer\r\n    const toggleDrawer = () => event => {\r\n        setDrawerOpen(!drawerOpen);\r\n        \r\n        if(currentNote === null){\r\n            setTitle(\"New Note\");\r\n        }\r\n    };\r\n            \r\n    // This method will close the dialog\r\n    const handleCloseDialog = () => {\r\n        setOpen(false);\r\n    };\r\n            \r\n    // This method will handle the lock. It will check whether the user wants to unlock or lock the note.\r\n    const handleToggleLock = (note, checkType) => {\r\n        setOpen(true);\r\n        setError(false);\r\n        setDialogType(\"Password\");\r\n        if(checkType === \"turnOff\"){\r\n            setType(\"turnOff\");\r\n            setCurrentNoteChosen(note);\r\n        } else if(checkType === \"turnOn\"){\r\n            setType(\"turnOn\");\r\n        } \r\n        setItemId(note.id)\r\n    };\r\n\r\n    /*  \r\n        This method will handle the password. If the type is turnOff meaning the user wants to unlock the note, it will \r\n        promt the user to enter the password in order to unlock. Else if it is turnOn meaning the user wants to lock the note, it will \r\n        promt the user to enter a password in order to lock it.\r\n    */\r\n    const handleNotePassword = () => {\r\n        if(type === \"turnOff\" && currentNoteChosen.password === password){\r\n            onClickToggleLock(itemId, password, type)\r\n        } else if(type === \"turnOff\" && currentNoteChosen.password !== password){\r\n            setError(true)\r\n            return\r\n        } else if(type === \"turnOn\"){\r\n            onClickToggleLock(itemId, password, type)\r\n        } \r\n        handleCloseDialog()\r\n    }\r\n\r\n    /*  \r\n        This method will check whether the note is locked or not, if so then it will promt the user to enter password, \r\n        then it will render the note on the editor\r\n    */\r\n    const handleCheckNote = (note) => {\r\n        if(note.locked === true){\r\n            setOpen(true);\r\n            setType(\"enterPassword\");\r\n            setCurrentNoteChosen(note);\r\n        }else{\r\n            onClickOpenNote(\"\", note);\r\n        }\r\n    }\r\n\r\n    // This method will handle the opening of locked notes. If password match then it will render.\r\n    const handleOpenLockedNote = () => {\r\n        if(currentNoteChosen.password === password){\r\n            onClickOpenNote(\"\", currentNoteChosen)\r\n            handleCloseDialog()\r\n        }else{\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Paper variant=\"outlined\">\r\n                <Toolbar>\r\n                    <IconButton aria-label=\"Menu\" color=\"inherit\" edge=\"start\" onClick={toggleDrawer()}>\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    {\r\n                        editMode === true \r\n                            ?\r\n                            <React.Fragment>\r\n                                <Hidden smUp>\r\n                                    <TextField onChange={handleTitleChange} onKeyDown={(event) => handleTitleMaxLength(event)} color=\"primary\" fullWidth margin=\"dense\" name=\"Title\" placeholder={currentNote === null ? \"Title\" : currentNote.title} variant=\"outlined\" style={{margin: \"0\"}} />\r\n                                </Hidden>\r\n                                <Hidden xsDown>\r\n                                    <TextField onChange={handleTitleChange} onKeyDown={(event) => handleTitleMaxLength(event)} color=\"primary\" margin=\"dense\" name=\"Title\" placeholder={currentNote === null ? \"Title\" : currentNote.title} variant=\"outlined\" style={{width: \"300px\", margin: \"0\"}} />\r\n                                </Hidden>\r\n                            </React.Fragment>   \r\n                                :\r\n                                <React.Fragment>\r\n                                    <Hidden smUp>\r\n                                        <Typography color=\"inherit\" variant=\"h5\">{currentNote === null ? calcLength(title) : calcLength(currentNote.titleDrawer)}</Typography>\r\n                                    </Hidden>\r\n                                    <Hidden xsDown>\r\n                                        <Typography color=\"inherit\" variant=\"h5\">{currentNote === null ? title : currentNote.title}</Typography>\r\n                                    </Hidden>\r\n                                </React.Fragment> \r\n                    }\r\n\r\n                    <Box style={{flex: 1}} />\r\n                    <Box style={{display: editMode === true ? \"block\" : \"none\"}} ml={0.5} mr={0.5}>\r\n                        <Button \r\n                            aria-label=\"Cancel\" \r\n                            color=\"default\"\r\n                            variant=\"text\"\r\n                            onClick={() => onClickCancelEditor()}>\r\n                            Cancel\r\n                        </Button>\r\n                    </Box>\r\n                    <Button \r\n                        aria-label={editMode === true ? \"Save\" : \"Edit\"} \r\n                        color={editMode === true ? \"inherit\" : \"primary\"}\r\n                        className={editMode === true ? Style.SuccessButton : \"\"}\r\n                        variant=\"outlined\"\r\n                        onClick={editMode === true ? () => handleSaveButtonAndTitle() : () => onClickEditMode()}\r\n                        disabled={editMode === false ? false : title.length > 18 ? true : false}>\r\n                        {editMode === true ? \"Save\" : \"Edit\"} \r\n                    </Button>\r\n                </Toolbar>\r\n            </Paper>\r\n            <Drawer \r\n                notes={notes}\r\n                drawerOpen={drawerOpen}\r\n                toggleDrawer={toggleDrawer}\r\n                onClickClearNotes={onClickClearNotes}\r\n                onClickDeleteNote={handleDeleteNote}\r\n                onClickOpenNote={onClickOpenNote}\r\n                onClickToggleLock={onClickToggleLock}\r\n                handleToggleLock={handleToggleLock}\r\n                handleCheckNote={handleCheckNote}\r\n            />\r\n            <Dialog\r\n                open={open}\r\n                keepMounted\r\n                onClose={handleCloseDialog}\r\n                aria-labelledby=\"alertTitle\"\r\n                aria-describedby=\"alertDescription\"\r\n            >\r\n                <DialogTitle id=\"alertTitle\">\r\n                {\r\n                    dialogType === \"Password\" ? \"Enter Password\" : \"Delete Note\" \r\n                } \r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {\r\n                        dialogType === \"Password\" \r\n                            ?   \r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"password\"\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                error={error}\r\n                                onChange={(event) => setPassword(event.target.value)}\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                            />\r\n                                :\r\n                                <DialogContentText id=\"alertDescription\">Are you sure you want to delete this note?</DialogContentText>\r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCloseDialog} color=\"default\">\r\n                        Cancel\r\n                    </Button>\r\n                    {\r\n                        dialogType === \"Password\" \r\n                            ?   \r\n                            <Button disabled={password === \"\" ? true : false} onClick={type === \"turnOff\" || type === \"turnOn\" ? handleNotePassword : handleOpenLockedNote} color=\"primary\">\r\n                                Submit\r\n                            </Button>\r\n                                : \r\n                                <Button onClick={() => onClickDeleteNote(itemId)} onMouseDown={handleCloseDialog} color=\"secondary\">\r\n                                    Submit\r\n                                </Button>\r\n                    }\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\n// Material UI Components\r\nimport {Tooltip, Button} from '@material-ui/core';\r\n\r\n// Icons\r\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\r\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenter';\r\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRight';\r\n\r\nexport default function Alignment( {StyleButton, contentBlock, onClickToggleBlockStyle} ) {\r\n    const alignmentTypes = [\"ALIGNLEFT\", \"ALIGNCENTERED\", \"ALIGNRIGHT\"];\r\n\r\n    let [leftActive] = React.useState(false);\r\n    let [centeredActive] = React.useState(false);\r\n    let [rightActive] = React.useState(false);\r\n    \r\n    // Will loop through the alignmentTypes array and will check whether the cursor is on the style\r\n    alignmentTypes.forEach(item => {\r\n        const alignmentType = contentBlock.type === item ? contentBlock : {};\r\n\r\n        if(alignmentType.type === \"ALIGNLEFT\"){\r\n            leftActive = true;\r\n            centeredActive = false;\r\n            rightActive = false;\r\n        } \r\n        if(alignmentType.type === \"ALIGNCENTERED\"){\r\n            leftActive = false;\r\n            centeredActive = true;\r\n            rightActive = false;\r\n        }\r\n        if(alignmentType.type === \"ALIGNRIGHT\"){\r\n            leftActive = false;\r\n            centeredActive = false;\r\n            rightActive = true;\r\n        }\r\n    });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                alignmentTypes.map((item, index) => {\r\n                    let currentFormat;\r\n                    const itemText = (item === \"ALIGNLEFT\") ? \"ALIGN LEFT\" : (item === \"ALIGNCENTERED\") ? \"ALIGN CENTER\" : \"ALIGN RIGHT\" ;\r\n                    \r\n                    if(item === \"ALIGNLEFT\"){\r\n                        currentFormat = leftActive\r\n                    }\r\n                    if(item === \"ALIGNCENTERED\"){\r\n                        currentFormat = centeredActive\r\n                    }\r\n                    if(item === \"ALIGNRIGHT\"){\r\n                        currentFormat = rightActive\r\n                    }\r\n                    \r\n                    return(\r\n                        <div key={index} onMouseDown={(event) => {\r\n                            event.preventDefault();\r\n                            if(currentFormat === true){\r\n                                return\r\n                            }else{\r\n                                onClickToggleBlockStyle(item)\r\n                            }\r\n                        }}>\r\n                            <Tooltip title={itemText} placement=\"bottom\">\r\n                                <Button \r\n                                    aria-label={itemText} \r\n                                    className={StyleButton} \r\n                                    color={(currentFormat === true) ? \"primary\" : \"inherit\"} \r\n                                    size=\"large\" \r\n                                    variant={(currentFormat === true) ? \"contained\" : \"text\"}>\r\n                                    {\r\n                                        item === \"ALIGNLEFT\" ? <FormatAlignLeftIcon />\r\n                                            : item === \"ALIGNCENTERED\" ? <FormatAlignCenterIcon />\r\n                                                : item === \"ALIGNRIGHT\" ? <FormatAlignRightIcon />\r\n                                                    : \"\"\r\n                                    }\r\n                                </Button  >\r\n                            </Tooltip>\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\n// Material UI Components\r\nimport {Tooltip, Button, Dialog, DialogTitle, DialogContent, TextField, DialogActions } from '@material-ui/core';\r\n\r\n// Icons\r\nimport FormatClearRoundedIcon from '@material-ui/icons/FormatClearRounded';\r\nimport InsertLinkRoundedIcon from '@material-ui/icons/InsertLinkRounded';\r\n\r\nexport default function TopRightButtons( {StyleButton, anchorKey, onClickRemoveLastFormat, onClickToggleLink} ) {\r\n    const types = [\"REMOVE LAST STYLE\", \"LINK\"];\r\n    const [open, setOpen] = React.useState(false);\r\n    const [url, setURL] = React.useState('');\r\n    // const [urlValid, setUrlValid] = React.useState('');\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleURL = () => {\r\n        handleClose()\r\n        onClickToggleLink(url)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                types.map((item, index) => {\r\n                    return(\r\n                        <div key={index} onMouseDown={(event) => {\r\n                            event.preventDefault();\r\n\r\n                            if(item === \"REMOVE LAST STYLE\"){\r\n                                onClickRemoveLastFormat(anchorKey)\r\n                            }else{\r\n                                handleClickOpen()\r\n                            }\r\n                        }}>\r\n                            <Tooltip title={item} placement=\"bottom\">\r\n                                <Button \r\n                                    aria-label={item} \r\n                                    className={StyleButton} \r\n                                    color=\"inherit\"\r\n                                    size=\"large\" \r\n                                    variant=\"text\">\r\n                                    {\r\n                                        item === \"REMOVE LAST STYLE\" ? <FormatClearRoundedIcon />\r\n                                            : item === \"LINK\" ? <InsertLinkRoundedIcon />\r\n                                                : \"\"\r\n                                    }\r\n                                </Button  >\r\n                            </Tooltip>\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alertTitle\"\r\n            >\r\n                <DialogTitle id=\"alertTitle\">Enter URL</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"url\"\r\n                        label=\"URL\"\r\n                        placeholder=\"www.google.com\"\r\n                        type=\"text\"\r\n                        onChange={(event) => setURL(event.target.value)}\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"secondary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button disabled={url === \"\" ? true : false} onClick={handleURL} color=\"primary\">\r\n                        Submit\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react';\r\n\r\n// Material UI Components\r\nimport {Tooltip, Button} from '@material-ui/core';\r\n\r\n// Icons\r\nimport FormatBoldIcon from '@material-ui/icons/FormatBold';\r\nimport FormatItalicIcon from '@material-ui/icons/FormatItalic';\r\nimport FormatUnderlinedIcon from '@material-ui/icons/FormatUnderlined';\r\nimport FormatStrikethroughIcon from '@material-ui/icons/FormatStrikethrough';\r\nimport FormatSizeIcon from '@material-ui/icons/FormatSize';\r\n\r\nexport default function Formats( {StyleButton, currentSelectionAnchorOffset, contentBlock, onClickToggleStyle} ) {\r\n    const types = [\"BOLD\", \"ITALIC\", \"UNDERLINE\", \"STRIKETHROUGH\", \"UPPERCASE\"];\r\n    const stylesArray = [...contentBlock.getInlineStyleAt(currentSelectionAnchorOffset)]\r\n\r\n    let [boldActive] = React.useState(false);\r\n    let [italicActive] = React.useState(false);\r\n    let [underlineActive] = React.useState(false);\r\n    let [strikethroughActive] = React.useState(false);\r\n    let [uppercaseActive] = React.useState(false);\r\n\r\n    // This function will check whether the cursor is currently on an inline style if so it will set the activeFormat to either true or false\r\n    const checkStyle = (style) => {\r\n        switch(style){\r\n            case \"BOLD\":\r\n                boldActive = !boldActive;\r\n                break;\r\n            case \"ITALIC\":\r\n                italicActive = !italicActive;\r\n                break;\r\n            case \"UNDERLINE\":\r\n                underlineActive = !underlineActive;\r\n                break;\r\n            case \"STRIKETHROUGH\":\r\n                strikethroughActive = !strikethroughActive;\r\n                break;\r\n            case \"UPPERCASE\":\r\n                uppercaseActive = !uppercaseActive;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    \r\n    // Will loop through the types array and will execute the checkStyle function to check whether the cursor is on the style\r\n    for (const format of types) {\r\n        const formatStyle = stylesArray.find(item => item === format);\r\n\r\n        checkStyle(formatStyle);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                types.map((item, index) => {\r\n                    let currentFormat;\r\n                    \r\n                    if(item === \"BOLD\"){\r\n                        currentFormat = boldActive\r\n                    }\r\n                    if(item === \"ITALIC\"){\r\n                        currentFormat = italicActive\r\n                    }\r\n                    if(item === \"UNDERLINE\"){\r\n                        currentFormat = underlineActive\r\n                    }\r\n                    if(item === \"STRIKETHROUGH\"){\r\n                        currentFormat = strikethroughActive\r\n                    }\r\n                    if(item === \"UPPERCASE\"){\r\n                        currentFormat = uppercaseActive\r\n                    }\r\n\r\n                    return(\r\n                        <div key={index} onMouseDown={(event) => {\r\n                            event.preventDefault();\r\n\r\n                            if(currentFormat === false){\r\n                                checkStyle(item)\r\n                                onClickToggleStyle(item)\r\n                            }else{\r\n                                onClickToggleStyle(item)\r\n                            }\r\n                        }}>\r\n                            <Tooltip title={item} placement=\"bottom\">\r\n                                <Button \r\n                                    aria-label={item} \r\n                                    className={StyleButton} \r\n                                    color={(currentFormat === true) ? \"primary\" : \"inherit\"} \r\n                                    size=\"large\" \r\n                                    variant={(currentFormat === true) ? \"contained\" : \"text\"}>\r\n                                    {\r\n                                        item === \"BOLD\" ? <FormatBoldIcon />\r\n                                            : item === \"ITALIC\" ? <FormatItalicIcon />\r\n                                                : item === \"UNDERLINE\" ? <FormatUnderlinedIcon />\r\n                                                    : item === \"STRIKETHROUGH\" ? <FormatStrikethroughIcon />\r\n                                                        : item === \"UPPERCASE\" ? <FormatSizeIcon />\r\n                                                            : \"\"\r\n                                    }\r\n                                </Button  >\r\n                            </Tooltip>\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react';\r\n\r\n// Material UI Components\r\nimport {Button} from '@material-ui/core';\r\n\r\nexport default function FontSize( {StyleButton, currentSelectionAnchorOffset, contentBlock, onClickToggleStyle} ) {\r\n    const fontSizes = [\"14\", \"16\", \"24\", \"32\", \"40\", \"64\", \"96\"];\r\n    const stylesArray = [...contentBlock.getInlineStyleAt(currentSelectionAnchorOffset)]\r\n\r\n    let [fontSizeActive, setFontSizeActive] = React.useState('14');\r\n\r\n    React.useEffect(() => {\r\n        fontSizes.forEach(font => {\r\n            const fontSize = stylesArray.find(style => style === font) || \"\";\r\n    \r\n            if(fontSize === \"14\"){\r\n                setFontSizeActive(\"14\")\r\n            }\r\n            if(fontSize === \"16\"){\r\n                setFontSizeActive(\"16\")\r\n            }\r\n            if(fontSize === \"24\"){\r\n                setFontSizeActive(\"24\")\r\n            }\r\n            if(fontSize === \"32\"){    \r\n                setFontSizeActive(\"32\")    \r\n            } \r\n            if(fontSize === \"40\"){     \r\n                setFontSizeActive(\"40\")      \r\n            } \r\n            if(fontSize === \"64\"){ \r\n                setFontSizeActive(\"64\")\r\n            }\r\n            if(fontSize === \"96\"){\r\n                setFontSizeActive(\"96\")\r\n            }\r\n        });\r\n    }, [fontSizes, stylesArray])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                fontSizes.map((item, index) => {\r\n                    return(\r\n                        <div key={index} onMouseDown={(event) => {\r\n                            event.preventDefault();\r\n                            onClickToggleStyle(item)\r\n            \r\n                        }}>\r\n                            <Button \r\n                                aria-label={`font size ${item}px`} \r\n                                className={StyleButton} \r\n                                color={(fontSizeActive === item) ? \"primary\" : \"inherit\"} \r\n                                size=\"small\"\r\n                                style={{minWidth: \"34px\", margin: \"0\"}}\r\n                                variant={(fontSizeActive === item) ? \"contained\" : \"text\"}>\r\n                                {item}\r\n                            </Button  >\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react';\r\n\r\n// Material UI Components\r\nimport {Button} from '@material-ui/core';\r\n\r\n// Icons\r\nimport FiberManualRecordRoundedIcon from '@material-ui/icons/FiberManualRecordRounded';\r\n\r\nexport default function FontColor( {StyleButton, currentSelectionAnchorOffset, contentBlock, onClickToggleStyle} ) {\r\n    const fontColors = [\"INHERIT\", \"#FAFAFA\", \"#BDC3C7\", \"#C0392B\", \"#F1C40F\", \"#F39C12\", \"#8E44AD\", \"#2980B9\", \"#27AE60\"];\r\n    const stylesArray = [...contentBlock.getInlineStyleAt(currentSelectionAnchorOffset)]\r\n\r\n    let [fontColorActive, setFontColorActive] = React.useState('INHERIT');\r\n\r\n    React.useEffect(() => {\r\n        fontColors.forEach(font => {\r\n            const fontColor = stylesArray.find(style => style === font) || \"\";\r\n            \r\n            switch(fontColor){\r\n                case \"INHERIT\":\r\n                    setFontColorActive(\"INHERIT\");\r\n                    break;\r\n                case \"#FAFAFA\":\r\n                    setFontColorActive(\"#FAFAFA\");\r\n                    break;\r\n                case \"#BDC3C7\":\r\n                    setFontColorActive(\"#BDC3C7\");\r\n                    break;\r\n                case \"#C0392B\":\r\n                    setFontColorActive(\"#C0392B\");\r\n                    break;\r\n                case \"#F1C40F\":\r\n                    setFontColorActive(\"#F1C40F\");\r\n                    break;\r\n                case \"#F39C12\":\r\n                    setFontColorActive(\"#F39C12\");\r\n                    break;\r\n                case \"#8E44AD\":\r\n                    setFontColorActive(\"#8E44AD\");\r\n                    break;\r\n                case \"#2980B9\":\r\n                    setFontColorActive(\"#2980B9\");\r\n                    break;\r\n                case \"#27AE60\":\r\n                    setFontColorActive(\"#27AE60\");\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n    }, [fontColors, stylesArray])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                fontColors.map((item, index) => {\r\n                    const checkItem = item === \"INHERIT\" ? \"#000000\" : item \r\n                    return(\r\n\r\n                        <div key={index} onMouseDown={(event) => {\r\n                            event.preventDefault();\r\n                            onClickToggleStyle(item)\r\n            \r\n                        }}>\r\n                            <Button \r\n                                aria-label={item === \"INHERIT\" ? `font color hex: #000000` : `font color hex: #${item}`} \r\n                                className={StyleButton} \r\n                                color={(fontColorActive === item) ? \"primary\" : \"inherit\"} \r\n                                size=\"small\"\r\n                                style={{maxWidth: \"34px\", minWidth: \"0\", margin: \"0\"}}\r\n                                variant={(fontColorActive === item) ? \"contained\" : \"text\"}>\r\n                                    <FiberManualRecordRoundedIcon style={{color: checkItem}} />\r\n                            </Button  >\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react';\r\n\r\n// Material UI Components\r\nimport {Button} from '@material-ui/core';\r\n\r\n// Icons\r\nimport NotInterestedRoundedIcon from '@material-ui/icons/NotInterestedRounded';\r\nimport FiberManualRecordRoundedIcon from '@material-ui/icons/FiberManualRecordRounded';\r\n\r\nexport default function Highlighter( {StyleButton, currentSelectionAnchorOffset, contentBlock, onClickToggleStyle} ) {\r\n    const highlighterColors = [\"TRANSPARENT\", \"#34495E\", \"#95A5A6\", \"#E74C3C\", \"#E67E22\",\"#9B59B6\", \"#3498DB\", \"#2ECC71\", \"#1ABC9C\"];\r\n    const stylesArray = [...contentBlock.getInlineStyleAt(currentSelectionAnchorOffset)]\r\n\r\n    let [highlighterActive, setHighlighterActive] = React.useState('TRANSPARENT');\r\n\r\n    React.useEffect(() => {\r\n        highlighterColors.forEach(font => {\r\n            const highlighterColor = stylesArray.find(style => style === font) || \"\";\r\n\r\n            switch(highlighterColor){\r\n                case \"TRANSPARENT\":\r\n                    setHighlighterActive(\"TRANSPARENT\");\r\n                    break;\r\n                case \"#34495E\":\r\n                    setHighlighterActive(\"#34495E\");\r\n                    break;\r\n                case \"#95A5A6\":\r\n                    setHighlighterActive(\"#95A5A6\");\r\n                    break;\r\n                case \"#E74C3C\":\r\n                    setHighlighterActive(\"#E74C3C\");\r\n                    break;\r\n                case \"#E67E22\":\r\n                    setHighlighterActive(\"#E67E22\");\r\n                    break;\r\n                case \"#9B59B6\":\r\n                    setHighlighterActive(\"#9B59B6\");\r\n                    break;\r\n                case \"#3498DB\":\r\n                    setHighlighterActive(\"#3498DB\");\r\n                    break;\r\n                case \"#2ECC71\":\r\n                    setHighlighterActive(\"#2ECC71\");\r\n                    break;\r\n                case \"#1ABC9C\":\r\n                    setHighlighterActive(\"#1ABC9C\");\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n    }, [highlighterColors, stylesArray])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                highlighterColors.map((item, index) => {\r\n                    // const checkItem = item === \"TRANSPARENT\" ? \"#000000\" : item \r\n                    return(\r\n\r\n                        <div key={index} onMouseDown={(event) => {\r\n                            event.preventDefault();\r\n                            onClickToggleStyle(item)\r\n            \r\n                        }}>\r\n                            <Button \r\n                                aria-label={item === \"TRANSPARENT\" ? `highlighter color transparent` : `highlighter color hex: #${item}`} \r\n                                className={StyleButton} \r\n                                color={(highlighterActive === item) ? \"primary\" : \"inherit\"} \r\n                                size=\"small\"\r\n                                style={{maxWidth: \"34px\", minWidth: \"0\", margin: \"0\"}}\r\n                                variant={(highlighterActive === item) ? \"contained\" : \"text\"}>\r\n                                    {\r\n                                        item === \"TRANSPARENT\" ? <NotInterestedRoundedIcon style={{color: \"inherit\"}} /> : <FiberManualRecordRoundedIcon style={{color: item}} />\r\n                                    }\r\n                            </Button  >\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n// Components\r\nimport Alignment from './components/Alignment/Alignment';\r\nimport TopRightButtons from './components/TopRightButtons/TopRightButtons';\r\nimport Formats from './components/Formats/Formats';\r\nimport FontSize from './components/FontSize/FontSize';\r\nimport FontColor from './components/FontColor/FontColor';\r\nimport Highlighter from './components/Highlighter/Highlighter';\r\n\r\n// Material UI Components\r\nimport { Popover, Fade, Grid, Toolbar, Divider, Typography} from '@material-ui/core';\r\n\r\n// Material UI Custom Style\r\nconst useStyles = makeStyles(theme => ({\r\n  Paper: {\r\n    width: \"auto\",\r\n    height: \"auto\",\r\n    margin: theme.spacing(1, 0),\r\n    padding: theme.spacing(0.5),\r\n    border: `1px solid ${theme.palette.divider}`,\r\n    borderRadius: theme.shape.borderRadius\r\n  },\r\n  Toolbar: {\r\n    width: \"100%\",\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'flex-start'\r\n  },\r\n  Button: {\r\n    maxWidth: \"72px\",\r\n    minWidth: \"44px\",\r\n    padding: theme.spacing(1),\r\n    margin: theme.spacing(0.5),\r\n    boxShadow: \"none\",\r\n    '&:hover': {\r\n      boxShadow: \"none\",\r\n    }\r\n  },\r\n  Divider: {\r\n    alignSelf: 'stretch',\r\n    margin: theme.spacing(0, 2)\r\n  },\r\n  Caption: {\r\n    textAlign: 'left',\r\n    fontSize: \"12px\",\r\n    color: \"rgba(0,0,0,0.87)\",\r\n    margin: theme.spacing(1, 1.5, 0, 0),\r\n  },\r\n  ColorContainer: {\r\n    width: \"102px\",\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    margin: theme.spacing(1, 0)\r\n  }\r\n}));\r\n\r\nexport default function InlineToolbar( {editorState, onClickToggleBlockStyle, onClickToggleStyle, handleCursorSetAtEnd, onClickRemoveLastFormat, onClickToggleLink }) {\r\n  const Style = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [newtimeoutCount, setNewtimeoutCount] = React.useState(null);\r\n\r\n  const handleCloseAnchorEL = () => {\r\n      setAnchorEl(null);\r\n  };\r\n\r\n  let open = Boolean(anchorEl);\r\n\r\n  const selectionState = editorState.getSelection();\r\n  const currentSelectionCollapsed = selectionState.isCollapsed();\r\n  const currentSelectionAnchorKey = selectionState.getAnchorKey();\r\n  const currentSelectionAnchorOffset= selectionState.getAnchorOffset();\r\n  const currentSelectionFocusOffset= selectionState.getFocusOffset();\r\n  \r\n  const contentState = editorState.getCurrentContent();\r\n  const contentBlock = contentState.getBlockForKey(currentSelectionAnchorKey);\r\n  const contentBlockLength = contentBlock.getLength();\r\n  \r\n  const selectionStateStart = selectionState.getStartOffset();\r\n  const selectionStateEnd = selectionState.getEndOffset();\r\n\r\n  const timeoutCount = Math.round((currentSelectionFocusOffset + selectionStateStart) * (currentSelectionFocusOffset + selectionStateEnd)) / (contentBlockLength / 10);\r\n\r\n  React.useEffect(() => {\r\n    if(timeoutCount !== newtimeoutCount){\r\n      setTimeout(() => {\r\n        setNewtimeoutCount(timeoutCount); \r\n      }, 1000);\r\n    } else if(timeoutCount === newtimeoutCount){\r\n        if((currentSelectionFocusOffset > selectionStateStart || currentSelectionFocusOffset < selectionStateEnd) && currentSelectionCollapsed === false){\r\n  \r\n          const childElements = Array.from(document.querySelectorAll('.public-DraftStyleDefault-block'));\r\n  \r\n          const parentElement = childElements.find(item => {\r\n            const key = item.dataset.offsetKey;\r\n            const keyArray = key.split('-');\r\n            const newKey = keyArray[0]\r\n  \r\n            return (newKey === currentSelectionAnchorKey)\r\n          })\r\n  \r\n          setAnchorEl(parentElement)\r\n        }\r\n    }\r\n  }, [newtimeoutCount, currentSelectionFocusOffset, selectionStateStart, selectionStateEnd, currentSelectionCollapsed, currentSelectionAnchorKey, setAnchorEl, timeoutCount])\r\n\r\n  return (\r\n    <Popover\r\n      open={open}\r\n      onClose={handleCloseAnchorEL}\r\n      anchorEl={anchorEl}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'center',\r\n      }}\r\n      transformOrigin={{\r\n        vertical: 'top',\r\n        horizontal: 'center',\r\n      }}\r\n      onExiting={() => handleCursorSetAtEnd(null)}\r\n      elevation={0}\r\n      marginThreshold={0}\r\n      TransitionComponent={Fade}\r\n      transitionDuration={1000}\r\n    >\r\n    <Grid \r\n      container \r\n      className={Style.Paper}\r\n      direction=\"column\"\r\n      justify=\"space-between\"\r\n      alignItems=\"center\"\r\n    >\r\n      <Grid item>\r\n        <Toolbar >\r\n          <Alignment StyleButton={Style.Button} contentBlock={contentBlock} onClickToggleBlockStyle={onClickToggleBlockStyle} />\r\n          <TopRightButtons StyleButton={Style.Button} anchorKey={currentSelectionAnchorKey} onClickRemoveLastFormat={onClickRemoveLastFormat} onClickToggleLink={onClickToggleLink} />\r\n        </Toolbar>\r\n      </Grid>\r\n      <Divider variant=\"middle\" className={Style.Divider} />\r\n      <Grid item>\r\n        <Toolbar>\r\n          <Formats StyleButton={Style.Button} currentSelectionAnchorOffset={currentSelectionAnchorOffset} contentBlock={contentBlock} onClickToggleStyle={onClickToggleStyle} />\r\n        </Toolbar>\r\n      </Grid>\r\n      <Divider variant=\"middle\" className={Style.Divider} />\r\n      <Grid item>\r\n        <Toolbar className={Style.Toolbar} variant=\"dense\">\r\n          <Typography variant=\"button\" className={Style.Caption}>Font Size:</Typography>\r\n          <Toolbar disableGutters variant=\"dense\">\r\n            <FontSize StyleButton={Style.Button} currentSelectionAnchorOffset={currentSelectionAnchorOffset} contentBlock={contentBlock} onClickToggleStyle={onClickToggleStyle} />\r\n          </Toolbar>\r\n        </Toolbar>\r\n      </Grid>\r\n      <Divider variant=\"middle\" className={Style.Divider}  />\r\n      <Grid item style={{width: '270px'}}>\r\n        <Toolbar className={Style.Toolbar} variant=\"dense\">\r\n          <Grid container alignItems=\"center\" justify=\"space-between\">\r\n            <Grid item style={{marginTop: \"10px\"}}>\r\n              <Typography variant=\"button\" className={Style.Caption}>Font Color:</Typography>\r\n              <div className={Style.ColorContainer}>\r\n                <FontColor StyleButton={Style.Button} currentSelectionAnchorOffset={currentSelectionAnchorOffset} contentBlock={contentBlock} onClickToggleStyle={onClickToggleStyle} />\r\n              </div>\r\n            </Grid>\r\n            <Grid item style={{marginTop: \"10px\"}}>\r\n              <Typography variant=\"button\" className={Style.Caption}>Highlighter:</Typography>\r\n              <div className={Style.ColorContainer}>\r\n                <Highlighter StyleButton={Style.Button} currentSelectionAnchorOffset={currentSelectionAnchorOffset} contentBlock={contentBlock} onClickToggleStyle={onClickToggleStyle} />              \r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </Toolbar>\r\n      </Grid>\r\n    </Grid>\r\n  </Popover>\r\n)}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n// Material UI Components\r\nimport { Box, Paper, Toolbar, IconButton, Divider, Button, Dialog, DialogTitle, DialogContent, DialogActions, Tooltip, TextField } from '@material-ui/core';\r\n\r\n// Icons\r\nimport UndoIcon from '@material-ui/icons/Undo';\r\nimport RedoIcon from '@material-ui/icons/Redo';\r\nimport InsertPhotoIcon from '@material-ui/icons/InsertPhoto';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    Toolbar: {\r\n        width: \"100%\",\r\n        minHeight: \"56px\",\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    Divider: {\r\n        alignSelf: 'stretch',\r\n        height: 'auto',\r\n        margin: theme.spacing(1, 2)\r\n    },\r\n}));\r\n\r\nexport default function StaticToolbar( {editorState, editMode, onClickUndo, onClickRedo, onClickToggleImageUrl, onClickInsertCanvas, onClickClearEditor} ) {\r\n    const Style = useStyles();\r\n    const [hidden, setHidden] = React.useState(true);\r\n    const [undo, setUndo] = React.useState(false);\r\n    const [redo, setRedo] = React.useState(false);\r\n\r\n    const undoStack = editorState.getUndoStack();\r\n    const redoStack = editorState.getRedoStack();\r\n\r\n    // console.log();\r\n    \r\n    React.useEffect(() => {\r\n        if(editMode === true){\r\n            setHidden(false);\r\n        }else{\r\n            setTimeout(() => {\r\n                setHidden(true);\r\n            }, 750)\r\n        }\r\n\r\n        if(undoStack.length < 1){\r\n            setUndo(false);\r\n        }else{\r\n            setUndo(true);\r\n        }\r\n\r\n        if(redoStack.length < 1){\r\n            setRedo(false);\r\n        }else{\r\n            setRedo(true);\r\n        }\r\n    }, [editMode, undoStack, redoStack])\r\n\r\n    // Dialog\r\n    const [open, setOpen] = React.useState(false);\r\n    const [url, setURL] = React.useState('');\r\n    // const [urlValid, setUrlValid] = React.useState('');\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleURL = () => {\r\n        handleClose()\r\n        onClickToggleImageUrl(url)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Box mb={2} className={editMode === true ? 'animated fadeIn' : 'animated fadeOut'} hidden={hidden}>\r\n                <Paper variant=\"outlined\" className={Style.Paper}>\r\n                    <Toolbar className={Style.Toolbar}>\r\n                        <Tooltip title={undo === false ? \"\" : \"UNDO\"} placement=\"bottom\">\r\n                            <span>\r\n                                <IconButton aria-label=\"Undo\" color=\"inherit\" edge=\"start\" onClick={() => onClickUndo()} disabled={undo === false ? true : false}>\r\n                                    <UndoIcon />\r\n                                </IconButton>\r\n                            </span>\r\n                        </Tooltip>\r\n                        <Tooltip title={redo === false ? \"\" : \"REDO\"} placement=\"bottom\">\r\n                            <span>\r\n                                <IconButton aria-label=\"Redo\" color=\"inherit\" edge=\"end\" onClick={() => onClickRedo()} disabled={redo === false ? true : false}>\r\n                                    <RedoIcon />\r\n                                </IconButton>\r\n                            </span>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"INSERT IMAGE\" placement=\"bottom\">\r\n                            <IconButton aria-label=\"Insert Image\" color=\"inherit\" style={{marginLeft: \"20px\"}} onClick={() => handleClickOpen()}>\r\n                                <InsertPhotoIcon />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Divider className={Style.Divider} orientation=\"vertical\" />\r\n                        <Button aria-label=\"Clear Editor\" color=\"secondary\" variant=\"outlined\" onClick={() => onClickClearEditor()}>Clear</Button>\r\n                    </Toolbar>\r\n                </Paper>\r\n            </Box>\r\n            <Dialog\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"alertTitle\"\r\n        >\r\n            <DialogTitle id=\"alertTitle\">Enter URL</DialogTitle>\r\n            <DialogContent>\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    id=\"url\"\r\n                    label=\"URL\"\r\n                    placeholder=\"www.google.com\"\r\n                    type=\"text\"\r\n                    onChange={(event) => setURL(event.target.value)}\r\n                    variant=\"outlined\"\r\n                    required\r\n                    fullWidth\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleClose} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button disabled={url === \"\" ? true : false} onClick={handleURL} color=\"primary\">\r\n                    Submit\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    </React.Fragment>\r\n)}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n// Material UI Components\r\nimport { Popover, Fade, Box, Toolbar, Tooltip, Button} from '@material-ui/core';\r\n\r\n// Icons\r\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\r\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenter';\r\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRight';\r\n\r\n// Material UI Custom Style\r\nconst useStyles = makeStyles(theme => ({\r\n    Paper: {\r\n      width: \"auto\",\r\n      height: \"auto\",\r\n      margin: theme.spacing(1, 0),\r\n      padding: theme.spacing(0.5),\r\n      border: `1px solid ${theme.palette.divider}`,\r\n      borderRadius: theme.shape.borderRadius\r\n    },\r\n    Toolbar: {\r\n      minHeight: \"0\",\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'flex-start'\r\n    },\r\n    Button: {\r\n      maxWidth: \"72px\",\r\n      minWidth: \"44px\",\r\n      padding: theme.spacing(1),\r\n      margin: theme.spacing(0.5),\r\n      boxShadow: \"none\",\r\n      '&:hover': {\r\n        boxShadow: \"none\",\r\n      }\r\n    }\r\n  }));\r\n\r\nexport default function AlignmentToolbar( {editorState, imageAlignmentType, onClickSetImageAlignment, handleCursorSetAtEnd} ) {\r\n    const Style = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    const alignmentTypes = [\"ALIGNIMGLEFT\", \"ALIGNIMGCENTERED\", \"ALIGNIMGRIGHT\"];\r\n  \r\n    const handleCloseAnchorEL = () => {\r\n        setAnchorEl(null);\r\n    };\r\n  \r\n    let open = Boolean(anchorEl);\r\n  \r\n    const selectionState = editorState.getSelection();\r\n    const currentSelectionCollapsed = selectionState.isCollapsed();\r\n    const currentSelectionHasFocus = selectionState.getHasFocus();\r\n    const currentSelectionAnchorKey = selectionState.getAnchorKey();\r\n    \r\n    const contentState = editorState.getCurrentContent();\r\n    const contentBlock = contentState.getBlockForKey(currentSelectionAnchorKey);\r\n  \r\n    React.useEffect(() => {\r\n        if(currentSelectionHasFocus === true && currentSelectionCollapsed === true){\r\n            const childElements = Array.from(document.querySelectorAll('.draftJsEmojiPlugin__image__192TI'));\r\n    \r\n            const parentElement = childElements.find(item => {\r\n                const parent = item.parentElement;\r\n                const key = parent.getAttribute(\"data-offset-key\");\r\n                const keyArray = key.split('-');\r\n                const newKey = keyArray[0]\r\n                \r\n                return (newKey === currentSelectionAnchorKey)\r\n            })\r\n            \r\n            setAnchorEl(parentElement)\r\n            }\r\n    }, [currentSelectionHasFocus, currentSelectionCollapsed, currentSelectionAnchorKey, setAnchorEl])\r\n  \r\n    return (\r\n        <Popover\r\n            open={open}\r\n            onClose={handleCloseAnchorEL}\r\n            anchorEl={anchorEl}\r\n            anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'center',\r\n            }}\r\n            transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'center',\r\n            }}\r\n            onExiting={() => handleCursorSetAtEnd(null)}\r\n            elevation={0}\r\n            marginThreshold={0}\r\n            TransitionComponent={Fade}\r\n            transitionDuration={1000}\r\n        >\r\n            <Box className={Style.Paper}>\r\n                <Toolbar className={Style.Toolbar}>\r\n                    {\r\n                        alignmentTypes.map((item, index) => {\r\n                            let currentFormat = imageAlignmentType === item ? true : false;\r\n                            const itemText = (item === \"ALIGNIMGLEFT\") ? \"ALIGN LEFT\" : (item === \"ALIGNIMGCENTERED\") ? \"ALIGN CENTER\" : \"ALIGN RIGHT\" ;\r\n                            \r\n                            return(\r\n                                <div key={index} onMouseDown={(event) => {\r\n                                    event.preventDefault();\r\n                                    if(currentFormat === true){\r\n                                        return\r\n                                    }else{\r\n                                        onClickSetImageAlignment(item, contentBlock)\r\n                                        handleCloseAnchorEL()\r\n                                    }\r\n                                }}>\r\n                                    <Tooltip title={itemText} placement=\"bottom\">\r\n                                        <Button \r\n                                            aria-label={itemText} \r\n                                            className={Style.Button} \r\n                                            color={(currentFormat === true) ? \"primary\" : \"inherit\"} \r\n                                            size=\"large\" \r\n                                            variant={(currentFormat === true) ? \"contained\" : \"text\"}>\r\n                                            {\r\n                                                item === \"ALIGNIMGLEFT\" ? <FormatAlignLeftIcon />\r\n                                                    : item === \"ALIGNIMGCENTERED\" ? <FormatAlignCenterIcon />\r\n                                                        : item === \"ALIGNIMGRIGHT\" ? <FormatAlignRightIcon />\r\n                                                            : \"\"\r\n                                            }\r\n                                        </Button  >\r\n                                    </Tooltip>\r\n                                </div>\r\n                            );\r\n                        })\r\n                    }\r\n                </Toolbar>\r\n            </Box>\r\n  </Popover>\r\n)}","import React from 'react';\nimport Editor, {composeDecorators} from 'draft-js-plugins-editor';\nimport { EditorState, RichUtils, convertToRaw, Modifier, CompositeDecorator, convertFromRaw, AtomicBlockUtils, KeyBindingUtil, getDefaultKeyBinding } from 'draft-js';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n// Draft JS Plugins\nimport createImagePlugin from 'draft-js-image-plugin';\nimport createFocusPlugin from 'draft-js-focus-plugin';\nimport createResizeablePlugin from 'draft-js-resizeable-plugin';\n\n// Components\nimport Header from '../components/Header/Header';\nimport InlineToolbar from '../components/InlineToolbar/InlineToolbar';\nimport StaticToolbar from '../components/StaticToolbar/StaticToolbar';\nimport AlignmentToolbar from '../components/AlignmentToolbar/AlignmentToolbar';\n\n// Material UI Components\nimport { ThemeProvider, Container, Box } from '@material-ui/core';\n\n// Style sheet\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport 'draft-js/dist/Draft.css'\nimport 'draft-js-focus-plugin/lib/plugin.css';\nimport 'draft-js-image-plugin/lib/plugin.css';\nimport './App.css';\n\n// Material UI Custom Theme\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#2980B9',\n    },\n    secondary: {\n      main: '#C0392B'\n    },\n    success: {\n      main: '#27AE60',\n    }\n  },\n});\n\n// Draft JS Plugins Instance\nconst focusPlugin = createFocusPlugin();\nconst resizeablePlugin = createResizeablePlugin();\n\n// Draft JS Plugins Decorator\nconst decorator = composeDecorators(\n  resizeablePlugin.decorator,\n  focusPlugin.decorator,\n);\nconst imagePlugin = createImagePlugin({ decorator });\n\nconst plugins = [\n  focusPlugin,\n  resizeablePlugin,\n  imagePlugin\n];\n\nexport default class App extends React.Component{\n  constructor(props){\n    super(props);\n    \n    this.decorator = new CompositeDecorator([\n      {\n        strategy: findLinkEntities,\n        component: Link,\n      },\n    ]);\n\n    this.state = {\n      editMode: false,\n      editorState: EditorState.createEmpty(this.decorator),\n      previousEditorState: null,\n      fontSize: '14',\n      fontColor: 'INHERIT',\n      highlighterColor: 'TRANSPARENT',\n      imageAlignmentType: null,\n      currentNote: null,\n      notes: [],\n    }\n  }\n\n  componentDidMount(){\n    // Will set a variables with the value of the local storage \n    const setNotes = JSON.parse(localStorage.getItem(\"Notes\") || \"[]\");\n\n    this.setState({\n      notes: setNotes,\n    })\n  }\n\n  // This method will handle the Editor whenever something changes\n  handleEditorChange = (editorState) => {\n    // console.log(convertToRaw(editorState.getCurrentContent()));\n\n    this.setState({\n      editorState: editorState,\n    })\n  };\n\n  handleEditorFocus = () => {\n    this.editor.focus();\n  };\n\n  // This method will handle whenever the user presses the tab key\n  onEditorTab = (event) => {\n    event.preventDefault();\n\n    const tabCharacter = \"    \";\n    \n    const editorState = this.state.editorState;\n    const newContentState = Modifier.replaceText(\n      editorState.getCurrentContent(),\n      editorState.getSelection(),\n      tabCharacter\n    );\n\n    this.setState({ \n      editorState: EditorState.push(editorState, newContentState, 'insert-characters')\n    });\n  }\n\n  // This method will set the editor to edit mode (Not read only) \n  handleClickEditMode = () => {\n    this.handleCursorSetAtEnd(this.state.editorState);\n    \n    this.setState(state => ({\n      editMode: !state.editMode,\n    }))\n  }\n\n  // This method will toggle the a block style\n  handleToggleBlockStyle = (block) => {\n    // const checkStyle = (style === 'UL' ? 'unordered-list-item' : style === 'OL' ? 'ordered-list-item' : style.toUpperCase() )\n    this.handleEditorChange(RichUtils.toggleBlockType(this.state.editorState, block))\n  }\n  \n  // This method will either toggle a style or remove it then apply the new one if the style is any of the values from the array\n  handleToggleStyle = (style) => {\n    const checkStylesArray = ['14', '16', '24', '32', '40', '64', '96', \"INHERIT\", \"#FAFAFA\", \"#BDC3C7\", \"#C0392B\", \"#F1C40F\", \"#F39C12\", \"#8E44AD\", \"#2980B9\", \"#27AE60\", \"TRANSPARENT\", \"#34495E\", \"#95A5A6\", \"#E74C3C\", \"#E67E22\",\"#9B59B6\", \"#3498DB\", \"#2ECC71\", \"#1ABC9C\"];\n\n    if(checkStylesArray.includes(style)){\n      this.handleToggleRemoveStyle(style);\n    }else{\n      this.handleEditorChange(RichUtils.toggleInlineStyle(this.state.editorState, style))\n    }\n  }\n\n  // This method will remove the current style from the selected text \n  handleToggleRemoveStyle = (style) => {\n    const currentEditorState = this.state.editorState;\n    const fontSize = ['14', '16', '24', '32', '40', '64', '96'];\n    const fontColor = [\"INHERIT\", \"#FAFAFA\", \"#BDC3C7\", \"#C0392B\", \"#F1C40F\", \"#F39C12\", \"#8E44AD\", \"#2980B9\", \"#27AE60\"];\n    const highlighterColor = [\"TRANSPARENT\", \"#34495E\", \"#95A5A6\", \"#E74C3C\", \"#E67E22\",\"#9B59B6\", \"#3498DB\", \"#2ECC71\", \"#1ABC9C\"];\n    let previousStyle;\n\n    if(fontSize.includes(style)){\n      previousStyle = this.state.fontSize;\n\n      this.setState({\n        fontSize: style\n      })\n    }else if(fontColor.includes(style)){\n      previousStyle = this.state.fontColor;\n\n      this.setState({\n        fontColor: style\n      })\n    }else if(highlighterColor.includes(style)){\n      previousStyle = this.state.highlighterColor;\n\n      this.setState({\n        highlighterColor: style\n      })\n    }\n\n    const selectionState = currentEditorState.getSelection();\n    const contentState = currentEditorState.getCurrentContent();\n\n    const removePreviousStyle = Modifier.removeInlineStyle(\n      contentState,\n      selectionState,\n      previousStyle\n    );\n      \n    const removePreviousStyleBlock = removePreviousStyle.getBlockMap();\n    \n    const newInlineStyle = Modifier.mergeBlockData(removePreviousStyle, selectionState, removePreviousStyleBlock);\n    const newEditorState = EditorState.push(currentEditorState, removePreviousStyle, newInlineStyle);\n\n    this.handleToggleApplyStyle(newEditorState, style);\n  }\n\n  // This method will apply the style chosen to the selected text\n  handleToggleApplyStyle = (editorState, style) => {\n    const newEditorState = editorState;\n\n    const selectionState = newEditorState.getSelection();\n    const contentState = newEditorState.getCurrentContent();\n\n    const applyNewStyle = Modifier.applyInlineStyle(\n      contentState,\n      selectionState,\n      style\n    );\n      \n    const applyNewStyleBlock = applyNewStyle.getBlockMap();\n    \n    const newInlineStyle = Modifier.mergeBlockData(applyNewStyle, selectionState, applyNewStyleBlock);\n    const updateEditorState = EditorState.push(newEditorState, applyNewStyle, newInlineStyle);\n\n    this.setState({\n      editorState: updateEditorState,\n    });\n  }\n\n  // This method will set the cursor at the end of the editor\n  handleCursorSetAtEnd = (editorState) => {\n    const currentEditorState = editorState === null ? this.state.editorState : editorState;\n\n    this.setState({\n      editorState: EditorState.moveFocusToEnd(currentEditorState)\n    })\n  }\n\n  // This method will clear the editor\n  handleClickClearEditor = () => {\n    this.setState({\n      previousEditorState: this.state.editorState,\n    })\n\n    const newEditorState = EditorState.createEmpty();\n\n    const selectionState = newEditorState.getSelection();\n    const contentState = newEditorState.getCurrentContent();\n\n    const contentBlock = contentState.getBlockMap();\n  \n    const newBlock = Modifier.mergeBlockData(contentState, selectionState, contentBlock);\n    const updateEditorState = EditorState.push(newEditorState, contentState, newBlock);\n\n    this.setState({\n      editorState: updateEditorState,\n    })\n  }\n\n  // This method will set the editor back to view-mode and will not save the changes that the user has done.\n  onClickCancelEditor = () => {\n    this.setState(state => ({\n      editMode: !state.editMode,\n    }))\n  }\n\n  // This method will remove the last style inserted into the selected text\n  handleClickRemoveLastFormat = (key) => {\n    const editorState = this.state.editorState;\n    const selectionState = editorState.getSelection();\n  \n    const contentState = editorState.getCurrentContent();\n\n    const editorRaw = convertToRaw(editorState.getCurrentContent());\n    const editorRawBlock = editorRaw.blocks.find(item => item.key === key);\n\n    const inlineStyleArray = editorRawBlock.inlineStyleRanges;\n\n    inlineStyleArray.forEach(item => {\n      const removeStyle = Modifier.removeInlineStyle(\n        contentState,\n        selectionState,\n        item.style\n      );\n\n      const removeStyleBlock = removeStyle.getBlockMap();\n      \n      const newInlineStyle = Modifier.setBlockData(removeStyle, selectionState, removeStyleBlock);\n\n      const newEditorState = EditorState.push(editorState, removeStyle, newInlineStyle);\n\n      this.setState({\n        editorState: newEditorState,\n      });\n    })\n  }\n  \n  // This method will turn the text into a working link\n  handleClickToggleLink = (url) => {\n    const editorState = this.state.editorState;\n    const selectionState = editorState.getSelection();\n\n    const contentState = editorState.getCurrentContent();\n    const contentWithEntity = contentState.createEntity('LINK', 'MUTABLE', { url: url });\n    const newEditorState = EditorState.push(editorState, contentWithEntity, 'create-entity');\n    const entityKey = contentWithEntity.getLastCreatedEntityKey();\n\n    this.handleEditorChange(RichUtils.toggleLink(newEditorState, selectionState, entityKey));\n  }\n\n  // This method will set the url entered into an image component inside the editor\n  handleClickToggleImageUrl = (url) => {\n    const newEditorState = handleInsertImage(this.state.editorState, url);\n    this.handleEditorChange(newEditorState)\n  }\n\n  handleClickSetImageAlignment = (type, block) => {\n    this.setState({\n      imageAlignmentType: type\n    }, () => this.handleToggleBlockStyle(block))\n  }\n\n  // This method will save the editor and title and create with the data a new note\n  handleClickSave = (titleParam) => {\n    const date = new Date();\n    const currentNotes = [...this.state.notes];\n    const newCurrentNote = this.state.currentNote;\n\n    const noteData = convertToRaw(this.state.editorState.getCurrentContent());\n\n    const contentBlock = noteData.blocks[0];\n    const contentText = contentBlock.text;\n    const contentTextArray = contentText.split(\" \");\n\n    let title;\n    let drawerTitle;\n    \n    if(titleParam === \"New Note\" || titleParam === \"\" ){\n      title = contentTextArray[0];\n      if(title === \"\"){\n        title = drawerTitle = 'New Note';\n      }else {\n        const titleArray = title.split(\"\");\n        const newTitleArray = titleArray.slice(0, 12);\n        const newTitle = newTitleArray.join(\"\");\n    \n        title = `${title}...`;\n        drawerTitle = `${newTitle}...`;\n      }\n    }else{\n      if(titleParam.length > 12){\n        const titleArray = titleParam.split(\"\");\n        const newTitleArray = titleArray.slice(0, 12);\n        const newTitle = newTitleArray.join(\"\");\n    \n        drawerTitle = `${newTitle}...`;\n      }else{\n        drawerTitle = titleParam;\n      }\n      title = titleParam;\n    }\n\n    const day = date.getDate()\n    const month = (date.getMonth() + 1)\n    const year = date.getFullYear()\n    \n    const fullDate = `${month}/${day}/${year}`;\n\n    let newNote;\n    let newNotes = [];\n\n    if(newCurrentNote === null){\n      newNote = {\n        id: Math.random(),\n        title: title,\n        titleDrawer: drawerTitle,\n        date: fullDate,\n        password: \"\",\n        locked: false,\n        imageAlignmentType: this.state.imageAlignmentType,\n        data: noteData\n      }\n\n      newNotes = [...currentNotes];\n      newNotes.push(newNote);\n    }else{\n      newNote = {\n        id: newCurrentNote.id,\n        title: title,\n        titleDrawer: drawerTitle,\n        date: fullDate,\n        password: newCurrentNote.password,\n        locked: newCurrentNote.locked,\n        imageAlignmentType: this.state.imageAlignmentType,\n        data: noteData\n      }\n\n      newNotes = currentNotes.map(item => {\n        return item.id === newNote.id ? item = newNote : item\n      })\n    }\n\n    // Setting the Alarms array into our local storage\n    localStorage.setItem(\"Notes\", JSON.stringify(newNotes));\n\n    this.setState(state => ({\n      currentNote: newNote,\n      editMode: !state.editMode,\n      notes: newNotes,\n    }))\n  }\n\n  // This method will clear the notes\n  handleClickClearNotes = () => {\n    // Deleting the Notes item from local storage\n    localStorage.removeItem(\"Notes\")\n\n    this.setState({\n      notes: []\n    })\n  }\n\n  // This method will either lock the note or unlock the note depending on its locked state\n  handleClickToggleLock = (id, password, type) => {\n    // Getting the current state of notes array\n    const currentNotes = [...this.state.notes];\n    \n    const newNotes = currentNotes.map(item => {\n      if(item.id === id){\n        if(type === \"turnOn\"){\n          item.password = password;\n        }else{\n          item.password = \"\";\n        }\n        item.locked = !item.locked;\n      }\n      return item\n    })\n\n    // Setting the Notes array into our local storage\n    localStorage.setItem(\"Notes\", JSON.stringify(newNotes));\n\n    this.setState({\n      notes: newNotes\n    })\n  }\n  \n  // This method will delete the note from the notes array\n  handleClickDeleteNote = (id) => {\n    const itemId = id;\n\n    // Getting the current state of notes array\n    const currentNotes = [...this.state.notes];\n\n    // Remove the item from the new notes array\n    const newNotes = currentNotes.filter(item => {\n        return item.id !== itemId\n    });\n\n    // Setting the Notes array into our local storage\n    localStorage.setItem(\"Notes\", JSON.stringify(newNotes));\n\n    this.setState({\n        notes: newNotes,\n    })\n  }\n\n  // This method will check whether the user wants to open a new note or a previously created note\n  handleClickOpenNote = (type, note) => {\n    if(type === \"New\"){\n      this.setState({\n        editorState: EditorState.createEmpty(this.decorator),\n        currentNote: null,\n        imageAlignmentType: null,\n      })\n    }else{\n      const data = convertFromRaw(note.data);\n\n      this.setState({\n        editorState: EditorState.createWithContent(data),\n        currentNote: note,\n        imageAlignmentType: note.imageAlignmentType,\n      })\n    }\n  }\n\n  // This method is to try remove dublicate code\n  undoRedoMethod = (type) => {\n    if(this.state.previousEditorState !== null){\n      this.handleEditorChange(type(this.state.previousEditorState));\n\n      this.setState({\n        previousEditorState: null\n      })\n    }else{\n      this.handleEditorChange(type(this.state.editorState));\n    }\n  }\n\n  // This method will undo the last edit to the editor\n  handleUndo = () => {\n    this.undoRedoMethod(EditorState.undo);\n  } \n\n  // This method will redo the last edit that was undone to the editor\n  handleRedo = () => {\n    this.undoRedoMethod(EditorState.redo);\n  }\n\n  // Custom block styles\n  blockStyles = (contentBlock) => {\n    const type = contentBlock.getType();\n    const imageAlignmentType = this.state.imageAlignmentType === null || this.state.imageAlignmentType === undefined ? \"\" : this.state.imageAlignmentType;\n\n    // Alignment\n    if (type === 'ALIGNLEFT') {\n      return 'alignLeft';\n    } else if (type === 'ALIGNCENTERED') {\n      return 'alignCenter';\n    } else if (type === 'ALIGNRIGHT') {\n      return 'alignRight';\n    }\n\n    // Image Alignment\n    if (type === 'atomic'){\n      if (imageAlignmentType === 'ALIGNIMGLEFT') {\n        return 'alignImgLeft';\n      } else if (imageAlignmentType === 'ALIGNIMGCENTERED') {\n        return 'alignImgCenter';\n      } else if (imageAlignmentType === 'ALIGNIMGRIGHT') {\n        return 'alignImgRight';\n      }\n    }\n  }\n\n  // This method will return a string depending on the keys the user presses\n  keyBindingFn = (event) => {\n    if (KeyBindingUtil.hasCommandModifier(event) && event.keyCode === 66) { return 'BOLD'; }\n    else if (KeyBindingUtil.hasCommandModifier(event) && event.keyCode === 73) { return 'ITALIC'; }\n    else if (KeyBindingUtil.hasCommandModifier(event) && event.keyCode === 85) { return 'UNDERLINE'; }\n    else if (KeyBindingUtil.hasCommandModifier(event) && event.keyCode === 83) { return 'SAVE'; }\n    else if (KeyBindingUtil.hasCommandModifier(event) && event.shiftKey && event.keyCode === 90) { return 'REDO'; }\n    else if (KeyBindingUtil.hasCommandModifier(event) && event.keyCode === 90) { return 'UNDO'; }\n    console.log(event.keyCode)\n\n    return getDefaultKeyBinding(event);\n  }\n\n  // This method will execute the return string from the function keyBindingFn \n  handleKeyCommand = (command) => {\n    switch(command){\n      case \"BOLD\":\n        this.handleEditorChange(RichUtils.toggleInlineStyle(this.state.editorState, command))\n        return 'handled';\n      case \"ITALIC\":\n        this.handleEditorChange(RichUtils.toggleInlineStyle(this.state.editorState, command))\n        return 'handled';\n      case \"UNDERLINE\":\n        this.handleEditorChange(RichUtils.toggleInlineStyle(this.state.editorState, command))\n        return 'handled';\n      case \"SAVE\":\n        this.handleClickSave(\"\")\n        return 'handled';\n      case \"UNDO\":\n        this.handleUndo(\"\")\n        return 'handled';\n      case \"REDO\":\n        this.handleRedo()\n        return 'handled';\n      default:\n        return 'not-handled';\n    }\n  }\n  \n  render(){\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        <ThemeProvider theme={theme}>\n          <Container className='Container' maxWidth='md' disableGutters>\n            <Header \n              editMode={this.state.editMode}\n              currentNote={this.state.currentNote}\n              notes={this.state.notes}\n              onClickSave={this.handleClickSave} \n              onClickEditMode={this.handleClickEditMode} \n              onClickCancelEditor={this.onClickCancelEditor}\n              onClickClearNotes={this.handleClickClearNotes} \n              onClickToggleLock={this.handleClickToggleLock} \n              onClickDeleteNote={this.handleClickDeleteNote} \n              onClickOpenNote={this.handleClickOpenNote} \n              />\n            <Box m={2}>\n              <StaticToolbar \n                editorState={this.state.editorState} \n                editMode={this.state.editMode}\n                onClickUndo={this.handleUndo}\n                onClickRedo={this.handleRedo}\n                onClickToggleImageUrl={this.handleClickToggleImageUrl}\n                onClickClearEditor={this.handleClickClearEditor}\n              />\n              <div onClick={() => this.handleEditorFocus}>\n                <Editor \n                  customStyleMap={inlineStyles}\n                  blockStyleFn={this.blockStyles}\n                  editorState={this.state.editorState}\n                  onChange={this.handleEditorChange}\n                  onFocus={this.handleEditorFocus}\n                  onTab={this.onEditorTab}\n                  plugins={plugins}\n                  ref={(element) => { this.handleEditorFocus = element; }}\n                  readOnly={!this.state.editMode}\n                  handleKeyCommand={this.handleKeyCommand}\n                  keyBindingFn={this.keyBindingFn}\n                  spellCheck={true}\n                  placeholder='Enter your thoughts...'\n                />\n                {\n                  this.state.editMode === true\n                    ? \n                    <AlignmentToolbar \n                      editorState={this.state.editorState} \n                      imageAlignmentType={this.state.imageAlignmentType} \n                      onClickSetImageAlignment={this.handleClickSetImageAlignment}\n                      handleCursorSetAtEnd={this.handleCursorSetAtEnd}\n                    />\n                      : null\n                }               \n              </div>\n              <InlineToolbar \n                editorState={this.state.editorState} \n                onClickToggleBlockStyle={this.handleToggleBlockStyle}\n                onClickToggleStyle={this.handleToggleStyle}\n                handleCursorSetAtEnd={this.handleCursorSetAtEnd}\n                onClickRemoveLastFormat={this.handleClickRemoveLastFormat}\n                onClickToggleLink={this.handleClickToggleLink}\n              />\n            </Box>\n          </Container>\n        </ThemeProvider>\n      </React.Fragment>\n    );\n  }\n}\n\n// Custom inline Styles\nconst inlineStyles = {\n  'UPPERCASE': {\n    textTransform: 'uppercase',\n  },\n  '14': {\n    fontSize: '14px',\n  },\n  '16': {\n    fontSize: '16px',\n  },\n  '24': {\n    fontSize: '24px',\n  },\n  '32': {\n    fontSize: '32px',\n  },\n  '40': {\n    fontSize: '40px',\n  },\n  '64': {\n    fontSize: '64px',\n  },\n  '96': {\n    fontSize: '96px',\n  },\n  'TRANSPARENT': {\n    background: 'transparent',\n  },\n  '#34495E': {\n    background: '#34495E'\n  },\n  '#95A5A6': {\n    background: '#95A5A6'\n  },\n  '#E74C3C': {\n    background: '#E74C3C'\n  },\n  '#E67E22': {\n    background: '#E67E22'\n  },\n  '#9B59B6': {\n    background: '#9B59B6'\n  },\n  '#3498DB': {\n    background: '#3498DB'\n  },\n  '#2ECC71': {\n    background: '#2ECC71'\n  },\n  '#1ABC9C': {\n    background: '#1ABC9C'\n  },\n  'INHERIT': {\n    color: 'inherit'\n  },\n  '#FAFAFA': {\n    color: '#FAFAFA'\n  },\n  '#BDC3C7': {\n    color: '#BDC3C7'\n  },\n  '#C0392B': {\n    color: '#C0392B'\n  },\n  '#F1C40F': {\n    color: '#F1C40F'\n  },\n  '#F39C12': {\n    color: '#F39C12'\n  },\n  '#8E44AD': {\n    color: '#8E44AD'\n  },\n  '#2980B9': {\n    color: '#2980B9'\n  },\n  '#27AE60': {\n    color: '#27AE60'\n  }\n};\n\n// Creating a new entity\nfunction findLinkEntities(contentBlock, callback, contentState) {\n  contentBlock.findEntityRanges(\n    (character) => {\n      const entityKey = character.getEntity();\n      return (\n        entityKey !== null &&\n        contentState.getEntity(entityKey).getType() === 'LINK'\n      );\n    },\n    callback\n  );\n}\n\n// Creating an anchor tag\nconst Link = (props) => {\n  const { contentState, entityKey } = props;\n  const { url } = contentState.getEntity(entityKey).getData();\n  return (\n    <a\n      className=\"Link\"\n      href={url}\n      rel=\"noopener noreferrer\"\n      target=\"_blank\"\n      aria-label={url}\n    >{props.children}</a>\n  );\n};\n\nconst handleInsertImage = (editorState, url) => {\n  const contentState = editorState.getCurrentContent();\n  const contentStateWithEntity = contentState.createEntity(\n    \"image\",\n    \"IMMUTABLE\",\n    { src: url }\n  );\n  const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n  const newEditorState = EditorState.set(editorState, {\n    currentContent: contentStateWithEntity\n  });\n  return AtomicBlockUtils.insertAtomicBlock(newEditorState, entityKey, \" \");\n};","// Polyfill for Draft JS \n// import 'babel-polyfill';\n\n// React library\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Components\nimport App from './container/App';\n\n// Style sheet\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}