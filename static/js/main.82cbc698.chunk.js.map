{"version":3,"sources":["components/Drawer/Drawer.js","components/Header/Header.js","components/Toolbar/components/Alignment/Alignment.js","components/Toolbar/components/TopRightButtons/TopRightButtons.js","components/Toolbar/components/Formats/Formats.js","components/Toolbar/components/FontSize/FontSize.js","components/Toolbar/components/FontColor/FontColor.js","components/Toolbar/components/Highlighter/Highlighter.js","components/Toolbar/Toolbar.js","container/App.js","index.js"],"names":["Drawer","notes","drawerOpen","toggleDrawer","onClickClearNotes","onClickDeleteNote","onClickOpenNote","handleToggleLock","handleCheckNote","open","onClose","Box","role","m","style","width","display","alignItems","justifyContent","Typography","variant","Button","aria-label","color","onMouseDown","List","mt","mb","ListItem","selected","button","onClick","ListItemText","primary","ListItemSecondaryAction","IconButton","edge","map","note","key","id","divider","titleDrawer","secondary","date","locked","Header","editMode","currentNote","onClickSave","onClickEditMode","onClickCancelEditor","onClickClearEditor","onClickToggleLock","React","useState","title","number","setDrawerOpen","setOpen","type","setType","currentNoteChosen","setCurrentNoteChosen","password","setPassword","itemId","setItemId","error","setError","event","calcLength","titleArray","split","newTitle","slice","length","join","handleCloseDialog","Fragment","Paper","Toolbar","Hidden","smUp","xsDown","flex","ml","mr","checkType","Dialog","aria-labelledby","DialogTitle","DialogContent","TextField","autoFocus","margin","label","onChange","target","value","required","fullWidth","DialogActions","disabled","Alignment","StyleButton","contentBlock","onClickToggleBlockStyle","alignmentTypes","leftActive","centeredActive","rightActive","forEach","item","alignmentType","index","currentFormat","itemText","preventDefault","Tooltip","placement","className","size","TopRightButtons","anchorKey","editorState","onClickClearFormatting","onClickToggleLink","url","setURL","handleClose","placeholder","Formats","currentSelectionAnchorOffset","onClickToggleStyle","types","stylesArray","getInlineStyleAt","boldActive","italicActive","underlineActive","strikethroughActive","uppercaseActive","checkStyle","format","formatStyle","find","FontSize","fontSizes","fontSizeActive","setFontSizeActive","useEffect","font","fontSize","minWidth","FontColor","fontColors","fontColorActive","setFontColorActive","fontColor","checkItem","maxWidth","Highlighter","highlighterColors","highlighterActive","setHighlighterActive","highlighterColor","useStyles","makeStyles","theme","height","spacing","padding","border","palette","borderRadius","shape","flexDirection","boxShadow","Divider","alignSelf","Caption","textAlign","ColorContainer","flexWrap","handleCursorSetAtEnd","Style","anchorEl","setAnchorEl","newtimeoutCount","setNewtimeoutCount","Boolean","selectionState","getSelection","currentSelectionCollapsed","isCollapsed","currentSelectionAnchorKey","getAnchorKey","getAnchorOffset","currentSelectionFocusOffset","getFocusOffset","getCurrentContent","getBlockForKey","contentBlockLength","getLength","selectionStateStart","getStartOffset","selectionStateEnd","getEndOffset","timeoutCount","Math","round","setTimeout","parentElement","Array","from","document","querySelectorAll","dataset","offsetKey","Popover","anchorOrigin","vertical","horizontal","transformOrigin","onExiting","elevation","marginThreshold","TransitionComponent","Fade","transitionDuration","Grid","container","direction","justify","disableGutters","marginTop","createMuiTheme","main","blockStyles","getType","inlineStyles","textTransform","background","App","props","onEditorChange","setState","handleClickEditMode","state","handleToggleBlockStyle","block","RichUtils","toggleBlockType","handleToggleStyle","includes","handleToggleRemoveStyle","toggleInlineStyle","previousStyle","currentEditorState","contentState","removePreviousStyle","Modifier","removeInlineStyle","removePreviousStyleBlock","getBlockMap","newInlineStyle","mergeBlockData","newEditorState","EditorState","push","handleToggleApplyStyle","applyNewStyle","applyInlineStyle","applyNewStyleBlock","updateEditorState","moveFocusToEnd","handleClickClearFormatting","editorStateParmater","handleClickToggleLink","contentWithEntity","createEntity","entityKey","getLastCreatedEntityKey","toggleLink","handleClickSave","newNote","Date","currentNotes","noteData","convertToRaw","blocks","text","drawerTitle","day","getDate","month","getMonth","year","getFullYear","fullDate","newNotes","random","data","localStorage","setItem","JSON","stringify","handleClickClearNotes","removeItem","handleClickToggleLock","handleClickDeleteNote","filter","handleClickOpenNote","noteTitle","createEmpty","decorator","convertFromRaw","createWithContent","CompositeDecorator","strategy","findLinkEntities","component","Link","setDomEditorRef","ref","domEditor","focus","this","setNotes","parse","getItem","CssBaseline","ThemeProvider","Container","customStyleMap","blockStyleFn","readOnly","spellCheck","Component","callback","findEntityRanges","character","getEntity","getData","href","rel","children","ReactDOM","render","getElementById"],"mappings":"udAae,SAASA,EAAT,GAAgJ,IAA9HC,EAA6H,EAA7HA,MAAOC,EAAsH,EAAtHA,WAAYC,EAA0G,EAA1GA,aAAcC,EAA4F,EAA5FA,kBAAoBC,EAAwE,EAAxEA,kBAAmBC,EAAqD,EAArDA,gBAAiBC,EAAoC,EAApCA,iBAAkBC,EAAkB,EAAlBA,gBACxI,OACI,kBAACR,EAAA,EAAD,CAAiBS,KAAMP,EAAYQ,QAASP,KACxC,kBAACQ,EAAA,EAAD,CACIC,KAAK,eACLC,EAAG,EACHC,MAAO,CAACC,MAAO,UAEf,yBAAKD,MAAO,CAACE,QAAS,OAAQC,WAAY,SAAUC,eAAgB,kBAChE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,YACA,kBAACC,EAAA,EAAD,CACIC,aAAW,QACXC,MAAM,YACNH,QAAQ,WACRI,YAAa,kBAAMpB,MAJvB,UAQJ,kBAACqB,EAAA,EAAD,KACI,kBAACd,EAAA,EAAD,CAAKe,GAAI,EAAGC,GAAI,GACZ,kBAACC,EAAA,EAAD,CAAUC,UAAQ,EAACC,QAAM,EAACC,QAAS,kBAAMzB,EAAgB,QAAQkB,YAAarB,KAC1E,kBAAC6B,EAAA,EAAD,CAAcC,QAAS,aACvB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,MAAMd,aAAW,WAAWS,QAAS,kBAAMzB,EAAgB,QAAQkB,YAAarB,KAC7F,kBAAC,IAAD,UAMZF,EAAMoC,KAAI,SAAAC,GACN,OACI,kBAACV,EAAA,EAAD,CAAUW,IAAKD,EAAKE,GAAIC,SAAO,EAACX,QAAM,EAACC,QAAS,kBAAMvB,EAAgB8B,IAAOd,YAAarB,KACtF,kBAAC6B,EAAA,EAAD,CAAcC,QAASK,EAAKI,YAAaC,UAAWL,EAAKM,OACzD,kBAACV,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,MAAMd,cAA4B,IAAhBgB,EAAKO,OAAkB,cAAgB,gBAAiBd,SAAyB,IAAhBO,EAAKO,OAAkB,kBAAMtC,EAAiB+B,EAAM,YAAa,kBAAM/B,EAAiB+B,EAAM,aAE1K,IAAhBA,EAAKO,OAAkB,kBAAC,IAAD,MAAe,kBAAC,IAAD,OAG9C,kBAACV,EAAA,EAAD,CAAYC,KAAK,MAAMd,aAAW,cAAcS,QAAS,kBAAM1B,EAAkBiC,EAAKE,KAAKjB,MAAM,aAC7F,kBAAC,IAAD,e,8FC3C7B,SAASuB,EAAT,GAAoM,IAAlLC,EAAiL,EAAjLA,SAAUC,EAAuK,EAAvKA,YAAa/C,EAA0J,EAA1JA,MAAOgD,EAAmJ,EAAnJA,YAAaC,EAAsI,EAAtIA,gBAAqCC,GAAiG,EAArHC,mBAAqH,EAAjGD,qBAAqB/C,EAA4E,EAA5EA,kBAAmBiD,EAAyD,EAAzDA,kBAAmBhD,EAAsC,EAAtCA,kBAAmBC,EAAmB,EAAnBA,gBAAmB,EACpLgD,IAAMC,SAAS,YADqK,mBACvMC,EADuM,aAElLF,IAAMC,SAAS,IAFmK,mBAEvME,EAFuM,aAG1KH,IAAMC,UAAS,IAH2J,mBAGvMrD,EAHuM,KAG3LwD,EAH2L,OAMtLJ,IAAMC,UAAS,GANuK,mBAMvM9C,EANuM,KAMjMkD,EANiM,OAOtLL,IAAMC,SAAS,IAPuK,mBAOvMK,EAPuM,KAOjMC,EAPiM,OAQ5JP,IAAMC,SAAS,MAR6I,mBAQvMO,EARuM,KAQpLC,EARoL,OAS9KT,IAAMC,SAAS,IAT+J,mBASvMS,EATuM,KAS7LC,EAT6L,OAUlLX,IAAMC,SAAS,MAVmK,oBAUvMW,GAVuM,MAU/LC,GAV+L,SAWpLb,IAAMC,UAAS,GAXqK,qBAWvMa,GAXuM,MAWhMC,GAXgM,MAcxMlE,GAAe,kBAAM,SAAAmE,GACvBZ,GAAexD,KAIbqE,GAAa,SAACX,GAChB,IAAMY,EAAaZ,EAAKa,MAAM,IAExBC,EADgBF,EAAWG,MAAM,EAAGH,EAAWI,OAASnB,GAC/BoB,KAAK,IAEpC,OAAGjB,IAASJ,EACF,GAAN,OAAUkB,EAAV,OAEM,GAAN,OAAUA,IAKZI,GAAoB,WACtBnB,GAAQ,IAuDZ,OACI,kBAAC,IAAMoB,SAAP,KACI,kBAACC,EAAA,EAAD,CAAO5D,QAAQ,YACX,kBAAC6D,EAAA,EAAD,KACI,kBAAC9C,EAAA,EAAD,CAAYb,aAAW,OAAOC,MAAM,UAAUa,KAAK,QAAQL,QAAS5B,MAChE,kBAAC,IAAD,OAEJ,kBAAC+E,EAAA,EAAD,CAAQC,MAAI,GACR,kBAAChE,EAAA,EAAD,CAAYI,MAAM,UAAUH,QAAQ,MAA6BmD,GAAP,OAAhBvB,EAAkCQ,EAAoBR,EAAYN,eAEhH,kBAACwC,EAAA,EAAD,CAAQE,QAAM,GACV,kBAACjE,EAAA,EAAD,CAAYI,MAAM,UAAUH,QAAQ,MAAsB,OAAhB4B,EAAuBQ,EAAQR,EAAYQ,QAEzF,kBAAC7C,EAAA,EAAD,CAAKG,MAAO,CAACuE,KAAM,KACnB,kBAAC1E,EAAA,EAAD,CAAKG,MAAO,CAACE,SAAsB,IAAb+B,EAAoB,QAAU,QAASuC,GAAI,GAAKC,GAAI,IACtE,kBAAClE,EAAA,EAAD,CACIC,aAAW,SACXC,MAAM,UACNH,QAAQ,OACRW,QAAS,kBAAMoB,MAJnB,WAQJ,kBAAC9B,EAAA,EAAD,CACIC,cAAyB,IAAbyB,EAAoB,OAAS,OACzCxB,OAAoB,IAAbwB,EAAoB,YAAc,UACzC3B,QAAQ,WACRW,SAAsB,IAAbgB,EAAoB,kBAAME,KAAgB,kBAAMC,OAC3C,IAAbH,EAAoB,OAAS,UAI1C,kBAAC,EAAD,CACI9C,MAAOA,EACPC,WAAYA,EACZC,aAAcA,GACdC,kBAAmBA,EACnBC,kBAAmBA,EACnBC,gBAAiBA,EACjB+C,kBAAmBA,EACnB9C,iBA3Fa,SAAC+B,EAAMkD,GAC5B7B,GAAQ,GACRU,IAAS,GACQ,YAAdmB,GACC3B,EAAQ,WACRE,EAAqBzB,IACD,WAAdkD,GACN3B,EAAQ,UAEZM,GAAU7B,EAAKE,KAmFPhC,gBA7DY,SAAC8B,IACF,IAAhBA,EAAKO,QACJc,GAAQ,GACRE,EAAQ,iBACRE,EAAqBzB,IAErBhC,EAAgB,GAAIgC,MAyDpB,kBAACmD,EAAA,EAAD,CACIhF,KAAMA,EACNC,QAASoE,GACTY,kBAAgB,cAEhB,kBAACC,EAAA,EAAD,CAAanD,GAAG,cAAhB,kBACA,kBAACoD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,WAAS,EACTC,OAAO,QACPvD,GAAG,WACHwD,MAAM,WACNpC,KAAK,WACLQ,MAAOA,GACP6B,SAAU,SAAC3B,GAAD,OAAWL,EAAYK,EAAM4B,OAAOC,QAC9C/E,QAAQ,WACRgF,UAAQ,EACRC,WAAS,KAGjB,kBAACC,EAAA,EAAD,KACI,kBAACjF,EAAA,EAAD,CAAQU,QAAS+C,GAAmBvD,MAAM,aAA1C,UAGA,kBAACF,EAAA,EAAD,CAAQkF,SAAuB,KAAbvC,EAAgCjC,QAAkB,YAAT6B,GAA+B,WAATA,EAtGtE,WACvB,GAAY,YAATA,GAAsBE,EAAkBE,WAAaA,EACpDX,EAAkBa,GAAQF,EAAUJ,OACjC,IAAY,YAATA,GAAsBE,EAAkBE,WAAaA,EAE3D,YADAK,IAAS,GAEM,WAATT,GACNP,EAAkBa,GAAQF,EAAUJ,GAExCkB,MAiByB,WACtBhB,EAAkBE,WAAaA,GAC9B1D,EAAgB,GAAIwD,GACpBgB,MAEAT,IAAS,IAuE+I9C,MAAM,WAAtJ,a,6EC5JL,SAASiF,GAAT,GAA4E,IAAvDC,EAAsD,EAAtDA,YAAaC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,wBACrDC,EAAiB,CAAC,YAAa,gBAAiB,cADgC,EAGnEtD,IAAMC,UAAS,GAA7BsD,EAHiF,sBAI/DvD,IAAMC,UAAS,GAAjCuD,EAJiF,sBAKlExD,IAAMC,UAAS,GAA9BwD,EALiF,oBA4BtF,OApBAH,EAAeI,SAAQ,SAAAC,GACnB,IAAMC,EAAgBR,EAAa9C,OAASqD,EAAOP,EAAe,GAExC,cAAvBQ,EAActD,OACbiD,GAAa,EACbC,GAAiB,EACjBC,GAAc,GAEQ,kBAAvBG,EAActD,OACbiD,GAAa,EACbC,GAAiB,EACjBC,GAAc,GAEQ,eAAvBG,EAActD,OACbiD,GAAa,EACbC,GAAiB,EACjBC,GAAc,MAKlB,kBAAC,IAAMhC,SAAP,KAEQ6B,EAAevE,KAAI,SAAC4E,EAAME,GACtB,IAAIC,EACEC,EAAqB,cAATJ,EAAwB,aAAyB,kBAATA,EAA4B,eAAiB,cAYvG,MAVY,cAATA,IACCG,EAAgBP,GAER,kBAATI,IACCG,EAAgBN,GAER,eAATG,IACCG,EAAgBL,GAIhB,yBAAKxE,IAAK4E,EAAO3F,YAAa,SAAC8C,GAC3BA,EAAMgD,kBACe,IAAlBF,GAGCT,EAAwBM,KAG5B,kBAACM,EAAA,EAAD,CAAS/D,MAAO6D,EAAUG,UAAU,UAChC,kBAACnG,EAAA,EAAD,CACIC,aAAY+F,EACZI,UAAWhB,EACXlF,OAA0B,IAAlB6F,EAA0B,UAAY,UAC9CM,KAAK,QACLtG,SAA4B,IAAlBgG,EAA0B,YAAc,QAErC,cAATH,EAAuB,kBAAC,IAAD,MACR,kBAATA,EAA2B,kBAAC,IAAD,MACd,eAATA,EAAwB,kBAAC,KAAD,MACpB,U,8CClEvC,SAASU,GAAT,GAA8G,IAAnFlB,EAAkF,EAAlFA,YAAamB,EAAqE,EAArEA,UAAWC,EAA0D,EAA1DA,YAAaC,EAA6C,EAA7CA,uBAAwBC,EAAqB,EAArBA,kBAAqB,EAEhGzE,IAAMC,UAAS,GAFiF,mBAEjH9C,EAFiH,KAE3GkD,EAF2G,OAGlGL,IAAMC,SAAS,IAHmF,mBAGjHyE,EAHiH,KAG5GC,EAH4G,KAUlHC,EAAc,WAChBvE,GAAQ,IAQZ,OACI,kBAAC,IAAMoB,SAAP,KAnBU,CAAC,QAAS,QAqBN1C,KAAI,SAAC4E,EAAME,GACb,OACI,yBAAK5E,IAAK4E,EAAO3F,YAAa,SAAC8C,GAC3BA,EAAMgD,iBAEM,UAATL,EACCa,EAAuBF,EAAWC,GArB1DlE,GAAQ,KA0BY,kBAAC4D,EAAA,EAAD,CAAS/D,MAAOyD,EAAMO,UAAU,UAC5B,kBAACnG,EAAA,EAAD,CACIC,aAAY2F,EACZQ,UAAWhB,EACXlF,MAAM,UACNmG,KAAK,QACLtG,QAAQ,QAEK,UAAT6F,EAAmB,kBAAC,KAAD,MACJ,SAATA,EAAkB,kBAAC,KAAD,MACd,SAQtC,kBAACxB,EAAA,EAAD,CACIhF,KAAMA,EACNC,QAASwH,EACTxC,kBAAgB,cAEhB,kBAACC,EAAA,EAAD,CAAanD,GAAG,cAAhB,aACA,kBAACoD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,WAAS,EACTC,OAAO,QACPvD,GAAG,MACHwD,MAAM,MACNmC,YAAY,iBACZvE,KAAK,OACLqC,SAAU,SAAC3B,GAAD,OAAW2D,EAAO3D,EAAM4B,OAAOC,QACzC/E,QAAQ,WACRgF,UAAQ,EACRC,WAAS,KAGjB,kBAACC,EAAA,EAAD,KACI,kBAACjF,EAAA,EAAD,CAAQU,QAASmG,EAAa3G,MAAM,aAApC,UAGA,kBAACF,EAAA,EAAD,CAAQkF,SAAkB,KAARyB,EAA2BjG,QA7D3C,WACdmG,IACAH,EAAkBC,IA2D2DzG,MAAM,WAAvE,a,6GCxEL,SAAS6G,GAAT,GAkCX,IAlC8G,IAAhF3B,EAA+E,EAA/EA,YAAa4B,EAAkE,EAAlEA,6BAA8B3B,EAAoC,EAApCA,aAAc4B,EAAsB,EAAtBA,mBACjFC,EAAQ,CAAC,OAAQ,SAAU,YAAa,gBAAiB,aACzDC,EAAW,YAAO9B,EAAa+B,iBAAiBJ,IAFuD,EAI1F/E,IAAMC,UAAS,GAA7BmF,EAJwG,sBAKxFpF,IAAMC,UAAS,GAA/BoF,EALwG,sBAMrFrF,IAAMC,UAAS,GAAlCqF,EANwG,sBAOjFtF,IAAMC,UAAS,GAAtCsF,EAPwG,sBAQrFvF,IAAMC,UAAS,GAAlCuF,EARwG,oBAWvGC,EAAa,SAACjI,GAChB,OAAOA,GACH,IAAK,OACD4H,GAAcA,EACd,MACJ,IAAK,SACDC,GAAgBA,EAChB,MACJ,IAAK,YACDC,GAAmBA,EACnB,MACJ,IAAK,gBACDC,GAAuBA,EACvB,MACJ,IAAK,YACDC,GAAmBA,IA1B8E,aAkCxG,IAAME,EAAM,KACPC,EAAcT,EAAYU,MAAK,SAAAjC,GAAI,OAAIA,IAAS+B,KAEtDD,EAAWE,IAHf,MAAqBV,EAArB,eAA6B,IAM7B,OACI,kBAAC,IAAMxD,SAAP,KAEQwD,EAAMlG,KAAI,SAAC4E,EAAME,GACb,IAAIC,EAkBJ,MAhBY,SAATH,IACCG,EAAgBsB,GAER,WAATzB,IACCG,EAAgBuB,GAER,cAAT1B,IACCG,EAAgBwB,GAER,kBAAT3B,IACCG,EAAgByB,GAER,cAAT5B,IACCG,EAAgB0B,GAIhB,yBAAKvG,IAAK4E,EAAO3F,YAAa,SAAC8C,GAC3BA,EAAMgD,kBAEe,IAAlBF,GACC2B,EAAW9B,GACXqB,EAAmBrB,IAEnBqB,EAAmBrB,KAGvB,kBAACM,EAAA,EAAD,CAAS/D,MAAOyD,EAAMO,UAAU,UAC5B,kBAACnG,EAAA,EAAD,CACIC,aAAY2F,EACZQ,UAAWhB,EACXlF,OAA0B,IAAlB6F,EAA0B,UAAY,UAC9CM,KAAK,QACLtG,SAA4B,IAAlBgG,EAA0B,YAAc,QAErC,SAATH,EAAkB,kBAAC,KAAD,MACH,WAATA,EAAoB,kBAAC,KAAD,MACP,cAATA,EAAuB,kBAAC,KAAD,MACV,kBAATA,EAA2B,kBAAC,KAAD,MACd,cAATA,EAAuB,kBAAC,KAAD,MACnB,UC7F/C,SAASkC,GAAT,GAAoG,IAAhF1C,EAA+E,EAA/EA,YAAa4B,EAAkE,EAAlEA,6BAA8B3B,EAAoC,EAApCA,aAAc4B,EAAsB,EAAtBA,mBAClFc,EAAY,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACjDZ,EAAW,YAAO9B,EAAa+B,iBAAiBJ,IAFwD,EAIpE/E,IAAMC,SAAS,MAJqD,mBAIzG8F,EAJyG,KAIzFC,EAJyF,KAkC9G,OA5BAhG,IAAMiG,WAAU,WACZH,EAAUpC,SAAQ,SAAAwC,GACd,IAAMC,EAAWjB,EAAYU,MAAK,SAAApI,GAAK,OAAIA,IAAU0I,MAAS,GAE9C,OAAbC,GACCH,EAAkB,MAEN,OAAbG,GACCH,EAAkB,MAEN,OAAbG,GACCH,EAAkB,MAEN,OAAbG,GACCH,EAAkB,MAEN,OAAbG,GACCH,EAAkB,MAEN,OAAbG,GACCH,EAAkB,MAEN,OAAbG,GACCH,EAAkB,WAG3B,CAACF,EAAWZ,IAGX,kBAAC,IAAMzD,SAAP,KAEQqE,EAAU/G,KAAI,SAAC4E,EAAME,GACjB,OACI,yBAAK5E,IAAK4E,EAAO3F,YAAa,SAAC8C,GAC3BA,EAAMgD,iBACNgB,EAAmBrB,KAGnB,kBAAC5F,EAAA,EAAD,CACIC,aAAA,oBAAyB2F,EAAzB,MACAQ,UAAWhB,EACXlF,MAAQ8H,IAAmBpC,EAAQ,UAAY,UAC/CS,KAAK,QACL5G,MAAO,CAAC4I,SAAU,OAAQ3D,OAAQ,KAClC3E,QAAUiI,IAAmBpC,EAAQ,YAAc,QAClDA,Q,wBChDlB,SAAS0C,GAAT,GAAqG,IAAhFlD,EAA+E,EAA/EA,YAAa4B,EAAkE,EAAlEA,6BAA8B3B,EAAoC,EAApCA,aAAc4B,EAAsB,EAAtBA,mBACnFsB,EAAa,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WACtGpB,EAAW,YAAO9B,EAAa+B,iBAAiBJ,IAFyD,EAInE/E,IAAMC,SAAS,WAJoD,mBAI1GsG,EAJ0G,KAIzFC,EAJyF,KAwC/G,OAlCAxG,IAAMiG,WAAU,WACZK,EAAW5C,SAAQ,SAAAwC,GACf,IAAMO,EAAYvB,EAAYU,MAAK,SAAApI,GAAK,OAAIA,IAAU0I,MAAS,GAE9C,YAAdO,GACCD,EAAmB,WAEN,YAAdC,GACCD,EAAmB,WAEN,YAAdC,GACCD,EAAmB,WAEN,YAAdC,GACCD,EAAmB,WAEN,YAAdC,GACCD,EAAmB,WAEN,YAAdC,GACCD,EAAmB,WAEN,YAAdC,GACCD,EAAmB,WAEN,YAAdC,GACCD,EAAmB,WAEN,YAAdC,GACCD,EAAmB,gBAG5B,CAACF,EAAYpB,IAGZ,kBAAC,IAAMzD,SAAP,KAEQ6E,EAAWvH,KAAI,SAAC4E,EAAME,GAClB,IAAM6C,EAAqB,YAAT/C,EAAqB,UAAYA,EACnD,OAEI,yBAAK1E,IAAK4E,EAAO3F,YAAa,SAAC8C,GAC3BA,EAAMgD,iBACNgB,EAAmBrB,KAGnB,kBAAC5F,EAAA,EAAD,CACIC,aAAqB,YAAT2F,EAAA,qDAAqEA,GACjFQ,UAAWhB,EACXlF,MAAQsI,IAAoB5C,EAAQ,UAAY,UAChDS,KAAK,QACL5G,MAAO,CAACmJ,SAAU,OAAQP,SAAU,IAAK3D,OAAQ,KACjD3E,QAAUyI,IAAoB5C,EAAQ,YAAc,QAChD,kBAAC,KAAD,CAA8BnG,MAAO,CAACS,MAAOyI,W,yBC1DlE,SAASE,GAAT,GAAuG,IAAhFzD,EAA+E,EAA/EA,YAAa4B,EAAkE,EAAlEA,6BAA8B3B,EAAoC,EAApCA,aAAc4B,EAAsB,EAAtBA,mBACrF6B,EAAoB,CAAC,cAAe,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WACjH3B,EAAW,YAAO9B,EAAa+B,iBAAiBJ,IAF2D,EAIjE/E,IAAMC,SAAS,eAJkD,mBAI5G6G,EAJ4G,KAIzFC,EAJyF,KAwCjH,OAlCA/G,IAAMiG,WAAU,WACZY,EAAkBnD,SAAQ,SAAAwC,GACtB,IAAMc,EAAmB9B,EAAYU,MAAK,SAAApI,GAAK,OAAIA,IAAU0I,MAAS,GAE9C,gBAArBc,GACCD,EAAqB,eAED,YAArBC,GACCD,EAAqB,WAED,YAArBC,GACCD,EAAqB,WAED,YAArBC,GACCD,EAAqB,WAED,YAArBC,GACCD,EAAqB,WAED,YAArBC,GACCD,EAAqB,WAED,YAArBC,GACCD,EAAqB,WAED,YAArBC,GACCD,EAAqB,WAED,YAArBC,GACCD,EAAqB,gBAG9B,CAACF,EAAmB3B,IAGnB,kBAAC,IAAMzD,SAAP,KAEQoF,EAAkB9H,KAAI,SAAC4E,EAAME,GAEzB,OAEI,yBAAK5E,IAAK4E,EAAO3F,YAAa,SAAC8C,GAC3BA,EAAMgD,iBACNgB,EAAmBrB,KAGnB,kBAAC5F,EAAA,EAAD,CACIC,aAAqB,gBAAT2F,EAAA,kEAAsFA,GAClGQ,UAAWhB,EACXlF,MAAQ6I,IAAsBnD,EAAQ,UAAY,UAClDS,KAAK,QACL5G,MAAO,CAACmJ,SAAU,OAAQP,SAAU,IAAK3D,OAAQ,KACjD3E,QAAUgJ,IAAsBnD,EAAQ,YAAc,QAErC,gBAATA,EAAyB,kBAAC,KAAD,CAA0BnG,MAAO,CAACS,MAAO,aAAiB,kBAAC,KAAD,CAA8BT,MAAO,CAACS,MAAO0F,W,4CCtDlKsD,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCzF,MAAO,CACLjE,MAAO,OACP2J,OAAQ,OACR3E,OAAQ0E,EAAME,QAAQ,EAAG,GACzBC,QAASH,EAAME,QAAQ,IACvBE,OAAO,aAAD,OAAeJ,EAAMK,QAAQrI,SACnCsI,aAAcN,EAAMO,MAAMD,cAE5B9F,QAAS,CACPlE,MAAO,OACPC,QAAS,OACTiK,cAAe,SACf/J,eAAgB,SAChBD,WAAY,cAEdI,OAAQ,CACN4I,SAAU,OACVP,SAAU,OACVkB,QAASH,EAAME,QAAQ,GACvB5E,OAAQ0E,EAAME,QAAQ,IACtBO,UAAW,OACX,UAAW,CACTA,UAAW,SAGfC,QAAS,CACPC,UAAW,UACXrF,OAAQ0E,EAAME,QAAQ,EAAG,IAE3BU,QAAS,CACPC,UAAW,OACX7B,SAAU,OACVlI,MAAO,mBACPwE,OAAQ0E,EAAME,QAAQ,EAAG,IAAK,EAAG,IAEnCY,eAAgB,CACdxK,MAAO,QACPC,QAAS,OACTwK,SAAU,OACVzF,OAAQ0E,EAAME,QAAQ,EAAG,QAId,SAAS1F,GAAT,GAAkJ,IAA9H4C,EAA6H,EAA7HA,YAAalB,EAAgH,EAAhHA,wBAAyB2B,EAAuF,EAAvFA,mBAAoBmD,EAAmE,EAAnEA,qBAAsB3D,EAA6C,EAA7CA,uBAAwBC,EAAqB,EAArBA,kBACnI2D,EAAQnB,KADgJ,EAE9HjH,IAAMC,SAAS,MAF+G,mBAEvJoI,EAFuJ,KAE7IC,EAF6I,OAGhHtI,IAAMC,SAAS,MAHiG,mBAGvJsI,EAHuJ,KAGtIC,EAHsI,KAS1JrL,EAAOsL,QAAQJ,GAEbK,EAAiBnE,EAAYoE,eAC7BC,EAA4BF,EAAeG,cAC3CC,EAA4BJ,EAAeK,eAC3ChE,EAA8B2D,EAAeM,kBAC7CC,EAA6BP,EAAeQ,iBAG5C9F,EADemB,EAAY4E,oBACCC,eAAeN,GAC3CO,EAAqBjG,EAAakG,YAElCC,EAAsBb,EAAec,iBACrCC,EAAoBf,EAAegB,eAGnCC,EAAeC,KAAKC,OAAOZ,EAA8BM,IAAwBN,EAA8BQ,KAAuBJ,EAAqB,IAyBjK,OAvBArJ,IAAMiG,WAAU,WACd,GAAG0D,IAAiBpB,EAClBuB,YAAW,WACTtB,EAAmBmB,KAClB,WACE,GAAGA,IAAiBpB,IACnBU,EAA8BM,GAAuBN,EAA8BQ,KAAoD,IAA9Bb,EAAoC,CAE/I,IAEMmB,EAFgBC,MAAMC,KAAKC,SAASC,iBAAiB,oCAEvBvE,MAAK,SAAAjC,GAKvC,OAJYA,EAAKyG,QAAQC,UACJlJ,MAAM,KACH,KAEL2H,KAGrBR,EAAYyB,MAGjB,CAACxB,EAAiBU,EAA6BM,EAAqBE,EAAmBb,EAA2BE,EAA2BR,EAAaqB,IAG3J,kBAACW,GAAA,EAAD,CACEnN,KAAMA,EACNC,QAhDwB,WACxBkL,EAAY,OAgDZD,SAAUA,EACVkC,aAAc,CACZC,SAAU,SACVC,WAAY,UAEdC,gBAAiB,CACfF,SAAU,MACVC,WAAY,UAEdE,UAAW,kBAAMxC,EAAqB,OACtCyC,UAAW,EACXC,gBAAiB,EACjBC,oBAAqBC,KACrBC,mBAAoB,KAEtB,kBAACC,GAAA,EAAD,CACEC,WAAS,EACT/G,UAAWiE,EAAM1G,MACjByJ,UAAU,SACVC,QAAQ,gBACRzN,WAAW,UAEX,kBAACsN,GAAA,EAAD,CAAMtH,MAAI,GACR,kBAAChC,EAAA,EAAD,KACE,kBAACuB,GAAD,CAAWC,YAAaiF,EAAMrK,OAAQqF,aAAcA,EAAcC,wBAAyBA,IAC3F,kBAACgB,GAAD,CAAiBlB,YAAaiF,EAAMrK,OAAQuG,UAAWwE,EAA2BvE,YAAaA,EAAaC,uBAAwBA,EAAwBC,kBAAmBA,MAGnL,kBAACoD,GAAA,EAAD,CAAS/J,QAAQ,SAASqG,UAAWiE,EAAMP,UAC3C,kBAACoD,GAAA,EAAD,CAAMtH,MAAI,GACR,kBAAChC,EAAA,EAAD,KACE,kBAACmD,GAAD,CAAS3B,YAAaiF,EAAMrK,OAAQgH,6BAA8BA,EAA8B3B,aAAcA,EAAc4B,mBAAoBA,MAGpJ,kBAAC6C,GAAA,EAAD,CAAS/J,QAAQ,SAASqG,UAAWiE,EAAMP,UAC3C,kBAACoD,GAAA,EAAD,CAAMtH,MAAI,GACR,kBAAChC,EAAA,EAAD,CAAkBwC,UAAWiE,EAAMzG,QAAS7D,QAAQ,SAClD,kBAACD,EAAA,EAAD,CAAYC,QAAQ,SAASqG,UAAWiE,EAAML,SAA9C,cACA,kBAACpG,EAAA,EAAD,CAAkB0J,gBAAc,EAACvN,QAAQ,SACvC,kBAAC+H,GAAD,CAAU1C,YAAaiF,EAAMrK,OAAQgH,6BAA8BA,EAA8B3B,aAAcA,EAAc4B,mBAAoBA,OAIvJ,kBAAC6C,GAAA,EAAD,CAAS/J,QAAQ,SAASqG,UAAWiE,EAAMP,UAC3C,kBAACoD,GAAA,EAAD,CAAMtH,MAAI,EAACnG,MAAO,CAACC,MAAO,UACxB,kBAACkE,EAAA,EAAD,CAAkBwC,UAAWiE,EAAMzG,QAAS7D,QAAQ,SAClD,kBAACmN,GAAA,EAAD,CAAMC,WAAS,EAACvN,WAAW,SAASyN,QAAQ,iBAC1C,kBAACH,GAAA,EAAD,CAAMtH,MAAI,EAACnG,MAAO,CAAC8N,UAAW,SAC5B,kBAACzN,EAAA,EAAD,CAAYC,QAAQ,SAASqG,UAAWiE,EAAML,SAA9C,eACA,yBAAK5D,UAAWiE,EAAMH,gBACpB,kBAAC5B,GAAD,CAAWlD,YAAaiF,EAAMrK,OAAQgH,6BAA8BA,EAA8B3B,aAAcA,EAAc4B,mBAAoBA,MAGtJ,kBAACiG,GAAA,EAAD,CAAMtH,MAAI,EAACnG,MAAO,CAAC8N,UAAW,SAC5B,kBAACzN,EAAA,EAAD,CAAYC,QAAQ,SAASqG,UAAWiE,EAAML,SAA9C,gBACA,yBAAK5D,UAAWiE,EAAMH,gBACpB,kBAACrB,GAAD,CAAazD,YAAaiF,EAAMrK,OAAQgH,6BAA8BA,EAA8B3B,aAAcA,EAAc4B,mBAAoBA,W,kCCpJ9JmC,I,cAAQoE,aAAe,CAC3B/D,QAAS,CACP7I,QAAS,CACP6M,KAAM,WAERnM,UAAW,CACTmM,KAAM,eAcZ,SAASC,GAAYrI,GACnB,IAAM9C,EAAO8C,EAAasI,UAG1B,MAAa,cAATpL,EACK,YACW,kBAATA,EACF,cACW,eAATA,EACF,aAQS,wBAATA,EACA,KACW,sBAATA,EACF,UADF,EAMT,IAAMqL,GAAe,CACnB,UAAa,CACXC,cAAe,aAEjB,GAAM,CACJzF,SAAU,QAEZ,GAAM,CACJA,SAAU,QAEZ,GAAM,CACJA,SAAU,QAEZ,GAAM,CACJA,SAAU,QAEZ,GAAM,CACJA,SAAU,QAEZ,GAAM,CACJA,SAAU,QAEZ,GAAM,CACJA,SAAU,QAEZ,YAAe,CACb0F,WAAY,eAEd,UAAW,CACTA,WAAY,WAEd,UAAW,CACTA,WAAY,WAEd,UAAW,CACTA,WAAY,WAEd,UAAW,CACTA,WAAY,WAEd,UAAW,CACTA,WAAY,WAEd,UAAW,CACTA,WAAY,WAEd,UAAW,CACTA,WAAY,WAEd,UAAW,CACTA,WAAY,WAEd,QAAW,CACT5N,MAAO,WAET,UAAW,CACTA,MAAO,WAET,UAAW,CACTA,MAAO,WAET,UAAW,CACTA,MAAO,WAET,UAAW,CACTA,MAAO,WAET,UAAW,CACTA,MAAO,WAET,UAAW,CACTA,MAAO,WAET,UAAW,CACTA,MAAO,WAET,UAAW,CACTA,MAAO,YAIU6N,G,YACnB,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAkCRC,eAAiB,SAACzH,GAGhB,EAAK0H,SAAS,CACZ1H,YAAaA,KAvCC,EA4ClB2H,oBAAsB,WACpB,EAAK/D,qBAAqB,EAAKgE,MAAM5H,aAErC,EAAK0H,UAAS,SAAAE,GAAK,MAAK,CACtB1M,UAAW0M,EAAM1M,cAhDH,EAqDlB2M,uBAAyB,SAACC,GAExB,EAAKL,eAAeM,YAAUC,gBAAgB,EAAKJ,MAAM5H,YAAa8H,KAvDtD,EA2DlBG,kBAAoB,SAAChP,GACM,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,cAAe,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAE/OiP,SAASjP,GAC3B,EAAKkP,wBAAwBlP,GAE7B,EAAKwO,eAAeM,YAAUK,kBAAkB,EAAKR,MAAM5H,YAAa/G,KAjE1D,EAsElBkP,wBAA0B,SAAClP,GACzB,IAIIoP,EAJEC,EAAqB,EAAKV,MAAM5H,YACrB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAK1CkI,SAASjP,IACnBoP,EAAgB,EAAKT,MAAMhG,SAE3B,EAAK8F,SAAS,CACZ9F,SAAU3I,KARI,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAUxFiP,SAASjP,IAC1BoP,EAAgB,EAAKT,MAAM1F,UAE3B,EAAKwF,SAAS,CACZxF,UAAWjJ,KAbU,CAAC,cAAe,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAe5FiP,SAASjP,KACjCoP,EAAgB,EAAKT,MAAMnF,iBAE3B,EAAKiF,SAAS,CACZjF,iBAAkBxJ,KAItB,IAAMkL,EAAiBmE,EAAmBlE,eACpCmE,EAAeD,EAAmB1D,oBAElC4D,EAAsBC,WAASC,kBACnCH,EACApE,EACAkE,GAGIM,EAA2BH,EAAoBI,cAE/CC,EAAiBJ,WAASK,eAAeN,EAAqBrE,EAAgBwE,GAC9EI,EAAiBC,cAAYC,KAAKX,EAAoBE,EAAqBK,GAEjF,EAAKK,uBAAuBH,EAAgB9P,IA/G5B,EAmHlBiQ,uBAAyB,SAAClJ,EAAa/G,GACrC,IAAM8P,EAAiB/I,EAEjBmE,EAAiB4E,EAAe3E,eAChCmE,EAAeQ,EAAenE,oBAE9BuE,EAAgBV,WAASW,iBAC7Bb,EACApE,EACAlL,GAGIoQ,EAAqBF,EAAcP,cAEnCC,EAAiBJ,WAASK,eAAeK,EAAehF,EAAgBkF,GACxEC,EAAoBN,cAAYC,KAAKF,EAAgBI,EAAeN,GAE1E,EAAKnB,SAAS,CACZ1H,YAAasJ,KArIC,EA0IlB1F,qBAAuB,SAAC5D,GACtB,IAAMsI,EAAqC,OAAhBtI,EAAuB,EAAK4H,MAAM5H,YAAcA,EAE3E,EAAK0H,SAAS,CACZ1H,YAAagJ,cAAYO,eAAejB,MA9I1B,EAmKlBhN,oBAAsB,WACpB,EAAKoM,UAAS,SAAAE,GAAK,MAAK,CACtB1M,UAAW0M,EAAM1M,cArKH,EAyKlBsO,2BAA6B,SAAC9O,EAAK+O,KAzKjB,EAwMlBC,sBAAwB,SAACvJ,GACvB,IAAMH,EAAc,EAAK4H,MAAM5H,YACzBmE,EAAiBnE,EAAYoE,eAG7BuF,EADe3J,EAAY4E,oBACMgF,aAAa,OAAQ,UAAW,CAAEzJ,IAAKA,IACxE4I,EAAiBC,cAAYC,KAAKjJ,EAAa2J,EAAmB,iBAClEE,EAAYF,EAAkBG,0BAEpC,EAAKrC,eAAeM,YAAUgC,WAAWhB,EAAgB5E,EAAgB0F,KAjNzD,EAoNlBG,gBAAkB,WAChB,IAwBIC,EAxBElP,EAAO,IAAImP,KACXC,EAAY,YAAO,EAAKvC,MAAMxP,OAC9B+C,EAAc,EAAKyM,MAAMzM,YAEzBiP,EAAWC,uBAAa,EAAKzC,MAAM5H,YAAY4E,qBAM/CjJ,EAJeyO,EAASE,OAAO,GACJC,KACI3N,MAAM,KAEZ,GAIzBC,EAFalB,EAAMiB,MAAM,IACEE,MAAM,EAAG,IACXE,KAAK,IAE9BwN,EAAW,UAAM3N,EAAN,OAEX4N,EAAM1P,EAAK2P,UACXC,EAAQ5P,EAAK6P,WACbC,EAAO9P,EAAK+P,cAEZC,EAAQ,UAAMJ,EAAN,YAAeF,EAAf,YAAsBI,GAGhCG,EAAW,GAEI,OAAhB7P,GACD8O,EAAU,CACRtP,GAAI0K,KAAK4F,SACTtP,MAAOA,EACPd,YAAa2P,EACbzP,KAAMgQ,EACN5O,SAAU,GACVnB,QAAQ,EACRkQ,KAAMd,IAGRY,EAAQ,YAAOb,IACNlB,KAAKgB,KAEdA,EAAU,CACRtP,GAAIQ,EAAYR,GAChBgB,MAAOA,EACPd,YAAa2P,EACbzP,KAAMgQ,EACN5O,SAAUhB,EAAYgB,SACtBnB,OAAQG,EAAYH,OACpBkQ,KAAMd,GAGRY,EAAWb,EAAa3P,KAAI,SAAA4E,GAC1B,OAAOA,EAAKzE,KAAOsP,EAAQtP,GAAKyE,EAAO6K,EAAU7K,MAKrD+L,aAAaC,QAAQ,QAASC,KAAKC,UAAUN,IAE7C,EAAKtD,UAAS,SAAAE,GAAK,MAAK,CACtBzM,YAAaA,EACbD,UAAW0M,EAAM1M,SACjB9C,MAAO4S,OAnRO,EAuRlBO,sBAAwB,WAEtBJ,aAAaK,WAAW,SAExB,EAAK9D,SAAS,CACZtP,MAAO,MA5RO,EAgSlBqT,sBAAwB,SAAC9Q,EAAIwB,EAAUJ,GAErC,IAEMiP,EAFY,YAAO,EAAKpD,MAAMxP,OAENoC,KAAI,SAAA4E,GAShC,OARGA,EAAKzE,KAAOA,IAEXyE,EAAKjD,SADK,WAATJ,EACeI,EAEA,GAElBiD,EAAKpE,QAAUoE,EAAKpE,QAEfoE,KAIT+L,aAAaC,QAAQ,QAASC,KAAKC,UAAUN,IAE7C,EAAKtD,SAAS,CACZtP,MAAO4S,KApTO,EAyTlBU,sBAAwB,SAAC/Q,GACvB,IAAM0B,EAAS1B,EAMTqQ,EAHY,YAAO,EAAKpD,MAAMxP,OAGNuT,QAAO,SAAAvM,GACjC,OAAOA,EAAKzE,KAAO0B,KAIvB8O,aAAaC,QAAQ,QAASC,KAAKC,UAAUN,IAE7C,EAAKtD,SAAS,CACVtP,MAAO4S,KAxUK,EA4UlBY,oBAAsB,SAAC7P,EAAMtB,GAC3B,GAAY,QAATsB,EACD,EAAK2L,UAAS,SAAAE,GAAK,MAAK,CACtBzM,YAAa,KACb0Q,UAAW,WACX7L,YAAagJ,cAAY8C,YAAY,EAAKC,mBAEzC,CACH,IAAMb,EAAOc,yBAAevR,EAAKyQ,MAEjC,EAAKxD,SAAS,CACZvM,YAAaV,EACboR,UAAWpR,EAAKkB,MAChBqE,YAAagJ,cAAYiD,kBAAkBf,OAtV/C,EAAKa,UAAY,IAAIG,qBAAmB,CACtC,CACEC,SAAUC,GACVC,UAAWC,MAIf,EAAK1E,MAAQ,CACX5H,YAAagJ,cAAY8C,YAAY,EAAKC,WAC1C5Q,YAAa,KACbD,UAAU,EACV0G,SAAU,KACVM,UAAW,UACXO,iBAAkB,cAClBrK,MAAO,IAET,EAAKmU,gBAAkB,SAAAC,GAAG,OAAI,EAAKC,UAAYD,GAC/C,EAAKE,MAAQ,WAAO,EAAKD,UAAUC,SApBnB,E,iFAwBhBC,KAAKF,UAAUC,QAGf,IAAME,EAAWvB,KAAKwB,MAAM1B,aAAa2B,QAAQ,UAAY,MAE7DH,KAAKjF,SAAS,CACZtP,MAAOwU,M,+BAiUT,OACE,kBAAC,IAAM1P,SAAP,KACE,kBAAC6P,EAAA,EAAD,MACA,kBAACC,GAAA,EAAD,CAAepK,MAAOA,IACpB,kBAACqK,GAAA,EAAD,CAAWrN,UAAU,YAAYwC,SAAS,KAAK0E,gBAAc,GAC3D,kBAAC7L,EAAD,CACEC,SAAUyR,KAAK/E,MAAM1M,SACrBC,YAAawR,KAAK/E,MAAMzM,YACxB/C,MAAOuU,KAAK/E,MAAMxP,MAClBgD,YAAauR,KAAK3C,gBAClB3O,gBAAiBsR,KAAKhF,oBAEtBrM,oBAAqBqR,KAAKrR,oBAC1B/C,kBAAmBoU,KAAKpB,sBACxB/P,kBAAmBmR,KAAKlB,sBACxBjT,kBAAmBmU,KAAKjB,sBACxBjT,gBAAiBkU,KAAKf,sBAExB,kBAAC9S,EAAA,EAAD,CAAKE,EAAG,GACN,kBAAC,IAAD,CACEkU,eAAgB9F,GAChB+F,aAAcjG,GAEdlH,YAAa2M,KAAK/E,MAAM5H,YACxB5B,SAAUuO,KAAKlF,eAEf+E,IAAKG,KAAKJ,gBACVa,UAAWT,KAAK/E,MAAM1M,SACtBmS,YAAY,EACZ/M,YAAY,2BAEd,kBAAC,GAAD,CACEN,YAAa2M,KAAK/E,MAAM5H,YACxBlB,wBAAyB6N,KAAK9E,uBAC9BpH,mBAAoBkM,KAAK1E,kBACzBrE,qBAAsB+I,KAAK/I,qBAC3B3D,uBAAwB0M,KAAKnD,2BAC7BtJ,kBAAmByM,KAAKjD,gC,GArYPjO,IAAM6R,WAgZvC,SAASlB,GAAiBvN,EAAc0O,EAAUhF,GAChD1J,EAAa2O,kBACX,SAACC,GACC,IAAM5D,EAAY4D,EAAUC,YAC5B,OACgB,OAAd7D,GACgD,SAAhDtB,EAAamF,UAAU7D,GAAW1C,YAGtCoG,GAKJ,IAAMjB,GAAO,SAAC9E,GAAW,IACfe,EAA4Bf,EAA5Be,aAAcsB,EAAcrC,EAAdqC,UACd1J,EAAQoI,EAAamF,UAAU7D,GAAW8D,UAA1CxN,IACR,OACE,uBACEP,UAAU,OACVgO,KAAMzN,EACN0N,IAAI,sBACJxP,OAAO,SACP5E,aAAY0G,GACZqH,EAAMsG,W,OC9iBZC,IAASC,OAAO,kBAAC,GAAD,MAASrI,SAASsI,eAAe,W","file":"static/js/main.82cbc698.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// Components\r\n\r\n// Material UI Components\r\nimport { Drawer as DrawerComponent, List, ListItem, ListItemText, Typography, Box, Button, IconButton, ListItemSecondaryAction} from '@material-ui/core';\r\n\r\n// Icons\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\n\r\nexport default function Drawer( {notes, drawerOpen, toggleDrawer, onClickClearNotes , onClickDeleteNote, onClickOpenNote, handleToggleLock, handleCheckNote} ){           \r\n    return (\r\n        <DrawerComponent open={drawerOpen} onClose={toggleDrawer()}>\r\n            <Box\r\n                role=\"presentation\"\r\n                m={2}\r\n                style={{width: \"250px\"}}\r\n                >\r\n                <div style={{display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\"}}>\r\n                    <Typography variant=\"h6\">My Notes</Typography>\r\n                    <Button \r\n                        aria-label=\"Clear\" \r\n                        color=\"secondary\"\r\n                        variant=\"outlined\"\r\n                        onMouseDown={() => onClickClearNotes()}>\r\n                        Clear\r\n                    </Button>\r\n                </div>\r\n                <List>\r\n                    <Box mt={1} mb={1}>\r\n                        <ListItem selected button onClick={() => onClickOpenNote(\"New\")} onMouseDown={toggleDrawer()}>\r\n                            <ListItemText primary={\"New Note\"} />\r\n                            <ListItemSecondaryAction>\r\n                                <IconButton edge=\"end\" aria-label=\"New Note\" onClick={() => onClickOpenNote(\"New\")} onMouseDown={toggleDrawer()}>\r\n                                    <AddCircleIcon />\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    </Box>\r\n                    {\r\n                        notes.map(note => {\r\n                            return(\r\n                                <ListItem key={note.id} divider button onClick={() => handleCheckNote(note)} onMouseDown={toggleDrawer()}>\r\n                                    <ListItemText primary={note.titleDrawer} secondary={note.date} />\r\n                                    <ListItemSecondaryAction>\r\n                                        <IconButton edge=\"end\" aria-label={note.locked === true ? \"Locked Note\" : \"Unlocked Note\"} onClick={note.locked === true ? () => handleToggleLock(note, \"turnOff\") : () => handleToggleLock(note, \"turnOn\")}>\r\n                                            {\r\n                                                note.locked === true ? <LockIcon /> : <LockOpenIcon />\r\n                                            }\r\n                                        </IconButton>\r\n                                        <IconButton edge=\"end\" aria-label=\"Delete Note\" onClick={() => onClickDeleteNote(note.id)} color=\"secondary\">\r\n                                            <DeleteIcon />\r\n                                        </IconButton>\r\n                                    </ListItemSecondaryAction>\r\n                                </ListItem>\r\n                            );\r\n                        })\r\n                    }\r\n                </List>\r\n            </Box>\r\n        </DrawerComponent>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\n// Components\r\nimport Drawer from '../Drawer/Drawer';\r\n\r\n// Material UI Components\r\nimport { Paper, Toolbar, IconButton, TextField, Typography, Box, Button, Hidden, Dialog, DialogTitle, DialogContent, DialogActions  } from '@material-ui/core';\r\n\r\n// Icons\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nexport default function Header( {editMode, currentNote, notes, onClickSave, onClickEditMode, onClickClearEditor, onClickCancelEditor, onClickClearNotes, onClickToggleLock, onClickDeleteNote, onClickOpenNote} ) {\r\n    const [title, setTitle] = React.useState(\"New Note\");\r\n    const [number, setNumber] = React.useState(0);\r\n    const [drawerOpen, setDrawerOpen] = React.useState(false);\r\n\r\n    // Dialog\r\n    const [open, setOpen] = React.useState(false);\r\n    const [type, setType] = React.useState(\"\");\r\n    const [currentNoteChosen, setCurrentNoteChosen] = React.useState(null);\r\n    const [password, setPassword] = React.useState('');\r\n    const [itemId, setItemId] = React.useState(null);\r\n    const [error, setError] = React.useState(false);\r\n\r\n    // This will toggle the drawer meaning it wil either open/close the drawer\r\n    const toggleDrawer = () => event => {\r\n        setDrawerOpen(!drawerOpen);\r\n    };\r\n\r\n    \r\n    const calcLength = (type) => {\r\n        const titleArray = type.split(\"\");\r\n        const newTitleArray = titleArray.slice(0, titleArray.length - number);\r\n        const newTitle = newTitleArray.join(\"\");\r\n\r\n        if(type === title){\r\n            return `${newTitle}...`\r\n        }else{\r\n            return `${newTitle}`\r\n        }\r\n    }\r\n\r\n    // This method will close the dialog\r\n    const handleCloseDialog = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    // This method will handle the lock. It will check whether the user wants to unlock or lock the note.\r\n    const handleToggleLock = (note, checkType) => {\r\n        setOpen(true);\r\n        setError(false);\r\n        if(checkType === \"turnOff\"){\r\n            setType(\"turnOff\");\r\n            setCurrentNoteChosen(note);\r\n        } else if(checkType === \"turnOn\"){\r\n            setType(\"turnOn\");\r\n        } \r\n        setItemId(note.id)\r\n    };\r\n\r\n    /*  This method will handle the password. If the type is turnOff meaning the user wants to unlock the note, it will \r\n        promt the user to enter the password in order to unlock. Else if it is turnOn meaning the user wants to lock the note, it will \r\n        promt the user to enter a password in order to lock it.\r\n        */\r\n    const handleNotePassword = () => {\r\n        if(type === \"turnOff\" && currentNoteChosen.password === password){\r\n            onClickToggleLock(itemId, password, type)\r\n        } else if(type === \"turnOff\" && currentNoteChosen.password !== password){\r\n            setError(true)\r\n            return\r\n        } else if(type === \"turnOn\"){\r\n            onClickToggleLock(itemId, password, type)\r\n        } \r\n        handleCloseDialog()\r\n    }\r\n\r\n    /*  This method will check whether the note is locked or not, if so then it will promt the user to enter password, \r\n        then it will render the note on the editor\r\n        */\r\n    const handleCheckNote = (note) => {\r\n        if(note.locked === true){\r\n            setOpen(true);\r\n            setType(\"enterPassword\");\r\n            setCurrentNoteChosen(note);\r\n        }else{\r\n            onClickOpenNote(\"\", note);\r\n        }\r\n    }\r\n\r\n    // This method will handle the opening of locked notes. If password match then it will render.\r\n    const handleOpenLockedNote = () => {\r\n        if(currentNoteChosen.password === password){\r\n            onClickOpenNote(\"\", currentNoteChosen)\r\n            handleCloseDialog()\r\n        }else{\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Paper variant=\"outlined\">\r\n                <Toolbar>\r\n                    <IconButton aria-label=\"Menu\" color=\"inherit\" edge=\"start\" onClick={toggleDrawer()}>\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Hidden smUp>\r\n                        <Typography color=\"inherit\" variant=\"h5\">{currentNote === null ? calcLength(title) : calcLength(currentNote.titleDrawer)}</Typography>\r\n                    </Hidden>\r\n                    <Hidden xsDown>\r\n                        <Typography color=\"inherit\" variant=\"h5\">{currentNote === null ? title : currentNote.title}</Typography>\r\n                    </Hidden>\r\n                    <Box style={{flex: 1}} />\r\n                    <Box style={{display: editMode === true ? \"block\" : \"none\"}} ml={0.5} mr={0.5}>\r\n                        <Button \r\n                            aria-label=\"Cancel\" \r\n                            color=\"primary\"\r\n                            variant=\"text\"\r\n                            onClick={() => onClickCancelEditor()}>\r\n                            Cancel\r\n                        </Button>\r\n                    </Box>\r\n                    <Button \r\n                        aria-label={editMode === true ? \"Save\" : \"Edit\"} \r\n                        color={editMode === true ? \"secondary\" : \"primary\"}\r\n                        variant=\"outlined\"\r\n                        onClick={editMode === true ? () => onClickSave() : () => onClickEditMode()}>\r\n                        {editMode === true ? \"Save\" : \"Edit\"} \r\n                    </Button>\r\n                </Toolbar>\r\n            </Paper>\r\n            <Drawer \r\n                notes={notes}\r\n                drawerOpen={drawerOpen}\r\n                toggleDrawer={toggleDrawer}\r\n                onClickClearNotes={onClickClearNotes}\r\n                onClickDeleteNote={onClickDeleteNote}\r\n                onClickOpenNote={onClickOpenNote}\r\n                onClickToggleLock={onClickToggleLock}\r\n                handleToggleLock={handleToggleLock}\r\n                handleCheckNote={handleCheckNote}\r\n            />\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleCloseDialog}\r\n                aria-labelledby=\"alertTitle\"\r\n            >\r\n                <DialogTitle id=\"alertTitle\">Enter Password</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        error={error}\r\n                        onChange={(event) => setPassword(event.target.value)}\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCloseDialog} color=\"secondary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button disabled={password === \"\" ? true : false} onClick={type === \"turnOff\" || type === \"turnOn\" ? handleNotePassword : handleOpenLockedNote} color=\"primary\">\r\n                        Submit\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\n// Material UI Components\r\nimport {Tooltip, Button} from '@material-ui/core';\r\n\r\n// Icons\r\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\r\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenter';\r\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRight';\r\n\r\nexport default function Alignment( {StyleButton, contentBlock, onClickToggleBlockStyle} ) {\r\n    const alignmentTypes = [\"ALIGNLEFT\", \"ALIGNCENTERED\", \"ALIGNRIGHT\"];\r\n\r\n    let [leftActive] = React.useState(false);\r\n    let [centeredActive] = React.useState(false);\r\n    let [rightActive] = React.useState(false);\r\n    \r\n    // Will loop through the alignmentTypes array and will check whether the cursor is on the style\r\n    alignmentTypes.forEach(item => {\r\n        const alignmentType = contentBlock.type === item ? contentBlock : {};\r\n\r\n        if(alignmentType.type === \"ALIGNLEFT\"){\r\n            leftActive = true;\r\n            centeredActive = false;\r\n            rightActive = false;\r\n        } \r\n        if(alignmentType.type === \"ALIGNCENTERED\"){\r\n            leftActive = false;\r\n            centeredActive = true;\r\n            rightActive = false;\r\n        }\r\n        if(alignmentType.type === \"ALIGNRIGHT\"){\r\n            leftActive = false;\r\n            centeredActive = false;\r\n            rightActive = true;\r\n        }\r\n    });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                alignmentTypes.map((item, index) => {\r\n                    let currentFormat;\r\n                    const itemText = (item === \"ALIGNLEFT\") ? \"ALIGN LEFT\" : (item === \"ALIGNCENTERED\") ? \"ALIGN CENTER\" : \"ALIGN RIGHT\" ;\r\n                    \r\n                    if(item === \"ALIGNLEFT\"){\r\n                        currentFormat = leftActive\r\n                    }\r\n                    if(item === \"ALIGNCENTERED\"){\r\n                        currentFormat = centeredActive\r\n                    }\r\n                    if(item === \"ALIGNRIGHT\"){\r\n                        currentFormat = rightActive\r\n                    }\r\n                    \r\n                    return(\r\n                        <div key={index} onMouseDown={(event) => {\r\n                            event.preventDefault();\r\n                            if(currentFormat === true){\r\n                                return\r\n                            }else{\r\n                                onClickToggleBlockStyle(item)\r\n                            }\r\n                        }}>\r\n                            <Tooltip title={itemText} placement=\"bottom\">\r\n                                <Button \r\n                                    aria-label={itemText} \r\n                                    className={StyleButton} \r\n                                    color={(currentFormat === true) ? \"primary\" : \"inherit\"} \r\n                                    size=\"large\" \r\n                                    variant={(currentFormat === true) ? \"contained\" : \"text\"}>\r\n                                    {\r\n                                        item === \"ALIGNLEFT\" ? <FormatAlignLeftIcon />\r\n                                            : item === \"ALIGNCENTERED\" ? <FormatAlignCenterIcon />\r\n                                                : item === \"ALIGNRIGHT\" ? <FormatAlignRightIcon />\r\n                                                    : \"\"\r\n                                    }\r\n                                </Button  >\r\n                            </Tooltip>\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\n// Material UI Components\r\nimport {Tooltip, Button, Dialog, DialogTitle, DialogContent, TextField, DialogActions } from '@material-ui/core';\r\n\r\n// Icons\r\nimport FormatClearRoundedIcon from '@material-ui/icons/FormatClearRounded';\r\nimport InsertLinkRoundedIcon from '@material-ui/icons/InsertLinkRounded';\r\n\r\nexport default function TopRightButtons( {StyleButton, anchorKey, editorState, onClickClearFormatting, onClickToggleLink} ) {\r\n    const types = [\"CLEAR\", \"LINK\"];\r\n    const [open, setOpen] = React.useState(false);\r\n    const [url, setURL] = React.useState('');\r\n    // const [urlValid, setUrlValid] = React.useState('');\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleURL = () => {\r\n        handleClose()\r\n        onClickToggleLink(url)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                types.map((item, index) => {\r\n                    return(\r\n                        <div key={index} onMouseDown={(event) => {\r\n                            event.preventDefault();\r\n\r\n                            if(item === \"CLEAR\"){\r\n                                onClickClearFormatting(anchorKey, editorState)\r\n                            }else{\r\n                                handleClickOpen()\r\n                            }\r\n                        }}>\r\n                            <Tooltip title={item} placement=\"bottom\">\r\n                                <Button \r\n                                    aria-label={item} \r\n                                    className={StyleButton} \r\n                                    color=\"inherit\"\r\n                                    size=\"large\" \r\n                                    variant=\"text\">\r\n                                    {\r\n                                        item === \"CLEAR\" ? <FormatClearRoundedIcon />\r\n                                            : item === \"LINK\" ? <InsertLinkRoundedIcon />\r\n                                                : \"\"\r\n                                    }\r\n                                </Button  >\r\n                            </Tooltip>\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alertTitle\"\r\n            >\r\n                <DialogTitle id=\"alertTitle\">Enter URL</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"url\"\r\n                        label=\"URL\"\r\n                        placeholder=\"www.google.com\"\r\n                        type=\"text\"\r\n                        onChange={(event) => setURL(event.target.value)}\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"secondary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button disabled={url === \"\" ? true : false} onClick={handleURL} color=\"primary\">\r\n                        Submit\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react';\r\n\r\n// Material UI Components\r\nimport {Tooltip, Button} from '@material-ui/core';\r\n\r\n// Icons\r\nimport FormatBoldIcon from '@material-ui/icons/FormatBold';\r\nimport FormatItalicIcon from '@material-ui/icons/FormatItalic';\r\nimport FormatUnderlinedIcon from '@material-ui/icons/FormatUnderlined';\r\nimport FormatStrikethroughIcon from '@material-ui/icons/FormatStrikethrough';\r\nimport FormatSizeIcon from '@material-ui/icons/FormatSize';\r\n\r\nexport default function Formats( {StyleButton, currentSelectionAnchorOffset, contentBlock, onClickToggleStyle} ) {\r\n    const types = [\"BOLD\", \"ITALIC\", \"UNDERLINE\", \"STRIKETHROUGH\", \"UPPERCASE\"];\r\n    const stylesArray = [...contentBlock.getInlineStyleAt(currentSelectionAnchorOffset)]\r\n\r\n    let [boldActive] = React.useState(false);\r\n    let [italicActive] = React.useState(false);\r\n    let [underlineActive] = React.useState(false);\r\n    let [strikethroughActive] = React.useState(false);\r\n    let [uppercaseActive] = React.useState(false);\r\n\r\n    // This function will check whether the cursor is currently on an inline style if so it will set the activeFormat to either true or false\r\n    const checkStyle = (style) => {\r\n        switch(style){\r\n            case \"BOLD\":\r\n                boldActive = !boldActive;\r\n                break;\r\n            case \"ITALIC\":\r\n                italicActive = !italicActive;\r\n                break;\r\n            case \"UNDERLINE\":\r\n                underlineActive = !underlineActive;\r\n                break;\r\n            case \"STRIKETHROUGH\":\r\n                strikethroughActive = !strikethroughActive;\r\n                break;\r\n            case \"UPPERCASE\":\r\n                uppercaseActive = !uppercaseActive;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    \r\n    // Will loop through the types array and will execute the checkStyle function to check whether the cursor is on the style\r\n    for (const format of types) {\r\n        const formatStyle = stylesArray.find(item => item === format);\r\n\r\n        checkStyle(formatStyle);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                types.map((item, index) => {\r\n                    let currentFormat;\r\n                    \r\n                    if(item === \"BOLD\"){\r\n                        currentFormat = boldActive\r\n                    }\r\n                    if(item === \"ITALIC\"){\r\n                        currentFormat = italicActive\r\n                    }\r\n                    if(item === \"UNDERLINE\"){\r\n                        currentFormat = underlineActive\r\n                    }\r\n                    if(item === \"STRIKETHROUGH\"){\r\n                        currentFormat = strikethroughActive\r\n                    }\r\n                    if(item === \"UPPERCASE\"){\r\n                        currentFormat = uppercaseActive\r\n                    }\r\n\r\n                    return(\r\n                        <div key={index} onMouseDown={(event) => {\r\n                            event.preventDefault();\r\n\r\n                            if(currentFormat === false){\r\n                                checkStyle(item)\r\n                                onClickToggleStyle(item)\r\n                            }else{\r\n                                onClickToggleStyle(item)\r\n                            }\r\n                        }}>\r\n                            <Tooltip title={item} placement=\"bottom\">\r\n                                <Button \r\n                                    aria-label={item} \r\n                                    className={StyleButton} \r\n                                    color={(currentFormat === true) ? \"primary\" : \"inherit\"} \r\n                                    size=\"large\" \r\n                                    variant={(currentFormat === true) ? \"contained\" : \"text\"}>\r\n                                    {\r\n                                        item === \"BOLD\" ? <FormatBoldIcon />\r\n                                            : item === \"ITALIC\" ? <FormatItalicIcon />\r\n                                                : item === \"UNDERLINE\" ? <FormatUnderlinedIcon />\r\n                                                    : item === \"STRIKETHROUGH\" ? <FormatStrikethroughIcon />\r\n                                                        : item === \"UPPERCASE\" ? <FormatSizeIcon />\r\n                                                            : \"\"\r\n                                    }\r\n                                </Button  >\r\n                            </Tooltip>\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react';\r\n\r\n// Material UI Components\r\nimport {Button} from '@material-ui/core';\r\n\r\nexport default function FontSize( {StyleButton, currentSelectionAnchorOffset, contentBlock, onClickToggleStyle} ) {\r\n    const fontSizes = [\"14\", \"16\", \"24\", \"32\", \"40\", \"64\", \"96\"];\r\n    const stylesArray = [...contentBlock.getInlineStyleAt(currentSelectionAnchorOffset)]\r\n\r\n    let [fontSizeActive, setFontSizeActive] = React.useState('14');\r\n\r\n    React.useEffect(() => {\r\n        fontSizes.forEach(font => {\r\n            const fontSize = stylesArray.find(style => style === font) || \"\";\r\n    \r\n            if(fontSize === \"14\"){\r\n                setFontSizeActive(\"14\")\r\n            }\r\n            if(fontSize === \"16\"){\r\n                setFontSizeActive(\"16\")\r\n            }\r\n            if(fontSize === \"24\"){\r\n                setFontSizeActive(\"24\")\r\n            }\r\n            if(fontSize === \"32\"){    \r\n                setFontSizeActive(\"32\")    \r\n            } \r\n            if(fontSize === \"40\"){     \r\n                setFontSizeActive(\"40\")      \r\n            } \r\n            if(fontSize === \"64\"){ \r\n                setFontSizeActive(\"64\")\r\n            }\r\n            if(fontSize === \"96\"){\r\n                setFontSizeActive(\"96\")\r\n            }\r\n        });\r\n    }, [fontSizes, stylesArray])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                fontSizes.map((item, index) => {\r\n                    return(\r\n                        <div key={index} onMouseDown={(event) => {\r\n                            event.preventDefault();\r\n                            onClickToggleStyle(item)\r\n            \r\n                        }}>\r\n                            <Button \r\n                                aria-label={`font size ${item}px`} \r\n                                className={StyleButton} \r\n                                color={(fontSizeActive === item) ? \"primary\" : \"inherit\"} \r\n                                size=\"small\"\r\n                                style={{minWidth: \"34px\", margin: \"0\"}}\r\n                                variant={(fontSizeActive === item) ? \"contained\" : \"text\"}>\r\n                                {item}\r\n                            </Button  >\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react';\r\n\r\n// Material UI Components\r\nimport {Button} from '@material-ui/core';\r\n\r\n// Icons\r\nimport FiberManualRecordRoundedIcon from '@material-ui/icons/FiberManualRecordRounded';\r\n\r\nexport default function FontColor( {StyleButton, currentSelectionAnchorOffset, contentBlock, onClickToggleStyle} ) {\r\n    const fontColors = [\"INHERIT\", \"#9E9E9E\", \"#F44336\", \"#E91E63\", \"#9C27B0\", \"#2196F3\", \"#4CAF50\", \"#FFC107\", \"#FF9800\"];\r\n    const stylesArray = [...contentBlock.getInlineStyleAt(currentSelectionAnchorOffset)]\r\n\r\n    let [fontColorActive, setFontColorActive] = React.useState('INHERIT');\r\n\r\n    React.useEffect(() => {\r\n        fontColors.forEach(font => {\r\n            const fontColor = stylesArray.find(style => style === font) || \"\";\r\n    \r\n            if(fontColor === \"INHERIT\"){\r\n                setFontColorActive(\"INHERIT\")\r\n            }\r\n            if(fontColor === \"#9E9E9E\"){\r\n                setFontColorActive(\"#9E9E9E\")\r\n            }\r\n            if(fontColor === \"#F44336\"){\r\n                setFontColorActive(\"#F44336\")\r\n            }\r\n            if(fontColor === \"#E91E63\"){\r\n                setFontColorActive(\"#E91E63\")\r\n            }\r\n            if(fontColor === \"#9C27B0\"){\r\n                setFontColorActive(\"#9C27B0\")\r\n            }\r\n            if(fontColor === \"#2196F3\"){    \r\n                setFontColorActive(\"#2196F3\")    \r\n            } \r\n            if(fontColor === \"#4CAF50\"){     \r\n                setFontColorActive(\"#4CAF50\")      \r\n            } \r\n            if(fontColor === \"#FFC107\"){ \r\n                setFontColorActive(\"#FFC107\")\r\n            }\r\n            if(fontColor === \"#FF9800\"){\r\n                setFontColorActive(\"#FF9800\")\r\n            }\r\n        });\r\n    }, [fontColors, stylesArray])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                fontColors.map((item, index) => {\r\n                    const checkItem = item === \"INHERIT\" ? \"#000000\" : item \r\n                    return(\r\n\r\n                        <div key={index} onMouseDown={(event) => {\r\n                            event.preventDefault();\r\n                            onClickToggleStyle(item)\r\n            \r\n                        }}>\r\n                            <Button \r\n                                aria-label={item === \"INHERIT\" ? `font color hex: #000000` : `font color hex: #${item}`} \r\n                                className={StyleButton} \r\n                                color={(fontColorActive === item) ? \"primary\" : \"inherit\"} \r\n                                size=\"small\"\r\n                                style={{maxWidth: \"34px\", minWidth: \"0\", margin: \"0\"}}\r\n                                variant={(fontColorActive === item) ? \"contained\" : \"text\"}>\r\n                                    <FiberManualRecordRoundedIcon style={{color: checkItem}} />\r\n                            </Button  >\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react';\r\n\r\n// Material UI Components\r\nimport {Button} from '@material-ui/core';\r\n\r\n// Icons\r\nimport NotInterestedRoundedIcon from '@material-ui/icons/NotInterestedRounded';\r\nimport FiberManualRecordRoundedIcon from '@material-ui/icons/FiberManualRecordRounded';\r\n\r\nexport default function Highlighter( {StyleButton, currentSelectionAnchorOffset, contentBlock, onClickToggleStyle} ) {\r\n    const highlighterColors = [\"TRANSPARENT\", \"#C62828\", \"#AD1457\", \"#6A1B9A\", \"#1565C0\", \"#2E7D32\", \"#FF8F00\", \"#EF6C00\", \"#795548\"];\r\n    const stylesArray = [...contentBlock.getInlineStyleAt(currentSelectionAnchorOffset)]\r\n\r\n    let [highlighterActive, setHighlighterActive] = React.useState('TRANSPARENT');\r\n\r\n    React.useEffect(() => {\r\n        highlighterColors.forEach(font => {\r\n            const highlighterColor = stylesArray.find(style => style === font) || \"\";\r\n    \r\n            if(highlighterColor === \"TRANSPARENT\"){\r\n                setHighlighterActive(\"TRANSPARENT\")\r\n            }\r\n            if(highlighterColor === \"#C62828\"){\r\n                setHighlighterActive(\"#C62828\")\r\n            }\r\n            if(highlighterColor === \"#AD1457\"){\r\n                setHighlighterActive(\"#AD1457\")\r\n            }\r\n            if(highlighterColor === \"#6A1B9A\"){\r\n                setHighlighterActive(\"#6A1B9A\")\r\n            }\r\n            if(highlighterColor === \"#1565C0\"){    \r\n                setHighlighterActive(\"#1565C0\")    \r\n            } \r\n            if(highlighterColor === \"#2E7D32\"){     \r\n                setHighlighterActive(\"#2E7D32\")      \r\n            } \r\n            if(highlighterColor === \"#FF8F00\"){ \r\n                setHighlighterActive(\"#FF8F00\")\r\n            }\r\n            if(highlighterColor === \"#EF6C00\"){\r\n                setHighlighterActive(\"#EF6C00\")\r\n            }\r\n            if(highlighterColor === \"#795548\"){\r\n                setHighlighterActive(\"#795548\")\r\n            }\r\n        });\r\n    }, [highlighterColors, stylesArray])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                highlighterColors.map((item, index) => {\r\n                    // const checkItem = item === \"TRANSPARENT\" ? \"#000000\" : item \r\n                    return(\r\n\r\n                        <div key={index} onMouseDown={(event) => {\r\n                            event.preventDefault();\r\n                            onClickToggleStyle(item)\r\n            \r\n                        }}>\r\n                            <Button \r\n                                aria-label={item === \"TRANSPARENT\" ? `highlighter color transparent` : `highlighter color hex: #${item}`} \r\n                                className={StyleButton} \r\n                                color={(highlighterActive === item) ? \"primary\" : \"inherit\"} \r\n                                size=\"small\"\r\n                                style={{maxWidth: \"34px\", minWidth: \"0\", margin: \"0\"}}\r\n                                variant={(highlighterActive === item) ? \"contained\" : \"text\"}>\r\n                                    {\r\n                                        item === \"TRANSPARENT\" ? <NotInterestedRoundedIcon style={{color: \"inherit\"}} /> : <FiberManualRecordRoundedIcon style={{color: item}} />\r\n                                    }\r\n                            </Button  >\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n// Components\r\nimport Alignment from './components/Alignment/Alignment';\r\nimport TopRightButtons from './components/TopRightButtons/TopRightButtons';\r\nimport Formats from './components/Formats/Formats';\r\nimport FontSize from './components/FontSize/FontSize';\r\nimport FontColor from './components/FontColor/FontColor';\r\nimport Highlighter from './components/Highlighter/Highlighter';\r\n\r\n// Material UI Components\r\nimport { Popover, Fade, Grid, Toolbar as ToolbarComponent, Divider, Typography, Box} from '@material-ui/core';\r\n\r\n// Material UI Custom Style\r\nconst useStyles = makeStyles(theme => ({\r\n  Paper: {\r\n    width: \"auto\",\r\n    height: \"auto\",\r\n    margin: theme.spacing(1, 0),\r\n    padding: theme.spacing(0.5),\r\n    border: `1px solid ${theme.palette.divider}`,\r\n    borderRadius: theme.shape.borderRadius\r\n  },\r\n  Toolbar: {\r\n    width: \"100%\",\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'flex-start'\r\n  },\r\n  Button: {\r\n    maxWidth: \"72px\",\r\n    minWidth: \"44px\",\r\n    padding: theme.spacing(1),\r\n    margin: theme.spacing(0.5),\r\n    boxShadow: \"none\",\r\n    '&:hover': {\r\n      boxShadow: \"none\",\r\n    }\r\n  },\r\n  Divider: {\r\n    alignSelf: 'stretch',\r\n    margin: theme.spacing(0, 2)\r\n  },\r\n  Caption: {\r\n    textAlign: 'left',\r\n    fontSize: \"12px\",\r\n    color: \"rgba(0,0,0,0.87)\",\r\n    margin: theme.spacing(1, 1.5, 0, 0),\r\n  },\r\n  ColorContainer: {\r\n    width: \"102px\",\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    margin: theme.spacing(1, 0)\r\n  }\r\n}));\r\n\r\nexport default function Toolbar( { editorState, onClickToggleBlockStyle, onClickToggleStyle, handleCursorSetAtEnd, onClickClearFormatting, onClickToggleLink }) {\r\n  const Style = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [newtimeoutCount, setNewtimeoutCount] = React.useState(null);\r\n\r\n  const handleCloseAnchorEL = () => {\r\n      setAnchorEl(null);\r\n  };\r\n\r\n  let open = Boolean(anchorEl);\r\n\r\n  const selectionState = editorState.getSelection();\r\n  const currentSelectionCollapsed = selectionState.isCollapsed();\r\n  const currentSelectionAnchorKey = selectionState.getAnchorKey();\r\n  const currentSelectionAnchorOffset= selectionState.getAnchorOffset();\r\n  const currentSelectionFocusOffset= selectionState.getFocusOffset();\r\n  \r\n  const contentState = editorState.getCurrentContent();\r\n  const contentBlock = contentState.getBlockForKey(currentSelectionAnchorKey);\r\n  const contentBlockLength = contentBlock.getLength();\r\n  \r\n  const selectionStateStart = selectionState.getStartOffset();\r\n  const selectionStateEnd = selectionState.getEndOffset();\r\n\r\n  \r\n  const timeoutCount = Math.round((currentSelectionFocusOffset + selectionStateStart) * (currentSelectionFocusOffset + selectionStateEnd)) / (contentBlockLength / 10);\r\n  \r\n  React.useEffect(() => {\r\n    if(timeoutCount !== newtimeoutCount){\r\n      setTimeout(() => {\r\n        setNewtimeoutCount(timeoutCount); \r\n      }, 1250);\r\n    } else if(timeoutCount === newtimeoutCount){\r\n        if((currentSelectionFocusOffset > selectionStateStart || currentSelectionFocusOffset < selectionStateEnd) && currentSelectionCollapsed === false){\r\n  \r\n          const childElements = Array.from(document.querySelectorAll('.public-DraftStyleDefault-block'));\r\n  \r\n          const parentElement = childElements.find(item => {\r\n            const key = item.dataset.offsetKey;\r\n            const keyArray = key.split('-');\r\n            const newKey = keyArray[0]\r\n  \r\n            return (newKey === currentSelectionAnchorKey)\r\n          })\r\n  \r\n          setAnchorEl(parentElement)\r\n        }\r\n    }\r\n  }, [newtimeoutCount, currentSelectionFocusOffset, selectionStateStart, selectionStateEnd, currentSelectionCollapsed, currentSelectionAnchorKey, setAnchorEl, timeoutCount])\r\n\r\n  return (\r\n    <Popover\r\n      open={open}\r\n      onClose={handleCloseAnchorEL}\r\n      anchorEl={anchorEl}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'center',\r\n      }}\r\n      transformOrigin={{\r\n        vertical: 'top',\r\n        horizontal: 'center',\r\n      }}\r\n      onExiting={() => handleCursorSetAtEnd(null)}\r\n      elevation={0}\r\n      marginThreshold={0}\r\n      TransitionComponent={Fade}\r\n      transitionDuration={1000/*{ enter: 1500, exit: 1000 }*/}\r\n    >\r\n    <Grid \r\n      container \r\n      className={Style.Paper}\r\n      direction=\"column\"\r\n      justify=\"space-between\"\r\n      alignItems=\"center\"\r\n    >\r\n      <Grid item>\r\n        <ToolbarComponent >\r\n          <Alignment StyleButton={Style.Button} contentBlock={contentBlock} onClickToggleBlockStyle={onClickToggleBlockStyle} />\r\n          <TopRightButtons StyleButton={Style.Button} anchorKey={currentSelectionAnchorKey} editorState={editorState} onClickClearFormatting={onClickClearFormatting} onClickToggleLink={onClickToggleLink} />\r\n        </ToolbarComponent>\r\n      </Grid>\r\n      <Divider variant=\"middle\" className={Style.Divider} />\r\n      <Grid item>\r\n        <ToolbarComponent>\r\n          <Formats StyleButton={Style.Button} currentSelectionAnchorOffset={currentSelectionAnchorOffset} contentBlock={contentBlock} onClickToggleStyle={onClickToggleStyle} />\r\n        </ToolbarComponent>\r\n      </Grid>\r\n      <Divider variant=\"middle\" className={Style.Divider} />\r\n      <Grid item>\r\n        <ToolbarComponent className={Style.Toolbar} variant=\"dense\">\r\n          <Typography variant=\"button\" className={Style.Caption}>Font Size:</Typography>\r\n          <ToolbarComponent disableGutters variant=\"dense\">\r\n            <FontSize StyleButton={Style.Button} currentSelectionAnchorOffset={currentSelectionAnchorOffset} contentBlock={contentBlock} onClickToggleStyle={onClickToggleStyle} />\r\n          </ToolbarComponent>\r\n        </ToolbarComponent>\r\n      </Grid>\r\n      <Divider variant=\"middle\" className={Style.Divider}  />\r\n      <Grid item style={{width: '270px'}}>\r\n        <ToolbarComponent className={Style.Toolbar} variant=\"dense\">\r\n          <Grid container alignItems=\"center\" justify=\"space-between\">\r\n            <Grid item style={{marginTop: \"10px\"}}>\r\n              <Typography variant=\"button\" className={Style.Caption}>Font Color:</Typography>\r\n              <div className={Style.ColorContainer}>\r\n                <FontColor StyleButton={Style.Button} currentSelectionAnchorOffset={currentSelectionAnchorOffset} contentBlock={contentBlock} onClickToggleStyle={onClickToggleStyle} />\r\n              </div>\r\n            </Grid>\r\n            <Grid item style={{marginTop: \"10px\"}}>\r\n              <Typography variant=\"button\" className={Style.Caption}>Highlighter:</Typography>\r\n              <div className={Style.ColorContainer}>\r\n                <Highlighter StyleButton={Style.Button} currentSelectionAnchorOffset={currentSelectionAnchorOffset} contentBlock={contentBlock} onClickToggleStyle={onClickToggleStyle} />              \r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </ToolbarComponent>\r\n      </Grid>\r\n    </Grid>\r\n  </Popover>\r\n)}","import React from 'react';\nimport Editor from 'draft-js-plugins-editor';\n// import Immutable from 'immutable';\nimport { EditorState, RichUtils, convertToRaw, Modifier, CompositeDecorator, ContentState, ContentBlock, CharacterMetadata, convertFromRaw } from 'draft-js';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n// Draft JS Plugins\n\n// Components\nimport Header from '../components/Header/Header';\nimport Toolbar from '../components/Toolbar/Toolbar';\n\n// Material UI Components\nimport { ThemeProvider, Container, Box } from '@material-ui/core';\n\n// Style sheet\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport 'draft-js/dist/Draft.css'\nimport './App.css';\n\n// Material UI Custom Theme\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#1976D2',\n    },\n    secondary: {\n      main: '#D32F2F'\n    }\n  },\n});\n\n// Draft JS Plugins Instance\n\n// const blockRenderMap = Immutable.Map({\n//   'LINK': {\n//     element: 'a'\n//   }\n// });\n\n// Custom block styles\nfunction blockStyles(contentBlock) {\n  const type = contentBlock.getType();\n\n  // Alignment\n  if (type === 'ALIGNLEFT') {\n    return 'alignLeft';\n  } else if (type === 'ALIGNCENTERED') {\n    return 'alignCenter';\n  } else if (type === 'ALIGNRIGHT') {\n    return 'alignRight';\n  }\n\n  // Link\n  // else if (type === 'LINK') {\n  //   return 'link';\n  // }\n  // Lists \n  else if (type === 'unordered-list-item') {\n    return 'UL';\n  } else if (type === 'ordered-list-item') {\n    return 'OL';\n  }\n}\n\n// Custom inline Styles\nconst inlineStyles = {\n  'UPPERCASE': {\n    textTransform: 'uppercase',\n  },\n  '14': {\n    fontSize: '14px',\n  },\n  '16': {\n    fontSize: '16px',\n  },\n  '24': {\n    fontSize: '24px',\n  },\n  '32': {\n    fontSize: '32px',\n  },\n  '40': {\n    fontSize: '40px',\n  },\n  '64': {\n    fontSize: '64px',\n  },\n  '96': {\n    fontSize: '96px',\n  },\n  'TRANSPARENT': {\n    background: 'transparent', \n  },\n  '#C62828': {\n    background: '#C62828'\n  },\n  '#AD1457': {\n    background: '#AD1457'\n  },\n  '#6A1B9A': {\n    background: '#6A1B9A'\n  },\n  '#1565C0': {\n    background: '#1565C0'\n  },\n  '#2E7D32': {\n    background: '#2E7D32'\n  },\n  '#FF8F00': {\n    background: '#FF8F00'\n  },\n  '#EF6C00': {\n    background: '#EF6C00'\n  },\n  '#795548': {\n    background: '#795548'\n  },\n  'INHERIT': {\n    color: 'inherit'\n  },\n  '#9E9E9E': {\n    color: '#9E9E9E'\n  },\n  '#F44336': {\n    color: '#F44336'\n  },\n  '#E91E63': {\n    color: '#E91E63'\n  },\n  '#9C27B0': {\n    color: '#9C27B0'\n  },\n  '#2196F3': {\n    color: '#2196F3'\n  },\n  '#4CAF50': {\n    color: '#4CAF50'\n  },\n  '#FFC107': {\n    color: '#FFC107'\n  },\n  '#FF9800': {\n    color: '#FF9800'\n  }\n};\n\nexport default class App extends React.Component{\n  constructor(props){\n    super(props);\n    \n    this.decorator = new CompositeDecorator([\n      {\n        strategy: findLinkEntities,\n        component: Link,\n      },\n    ]);\n\n    this.state = {\n      editorState: EditorState.createEmpty(this.decorator),\n      currentNote: null,\n      editMode: false,\n      fontSize: '14',\n      fontColor: 'INHERIT',\n      highlighterColor: 'TRANSPARENT',\n      notes: [],\n    }\n    this.setDomEditorRef = ref => this.domEditor = ref;\n    this.focus = () => {this.domEditor.focus()};\n  }\n\n  componentDidMount(){\n    this.domEditor.focus()\n\n    // Will set a variables with the value of the local storage \n    const setNotes = JSON.parse(localStorage.getItem(\"Notes\") || \"[]\");\n\n    this.setState({\n      notes: setNotes,\n    })\n  }\n\n  // This method will handle the Editor whenever something changes\n  onEditorChange = (editorState) => {\n    // console.log(convertToRaw(editorState.getCurrentContent()));\n\n    this.setState({\n      editorState: editorState,\n    })\n  };\n\n  // This method will set the editor to edit mode (Not read only) \n  handleClickEditMode = () => {\n    this.handleCursorSetAtEnd(this.state.editorState);\n    \n    this.setState(state => ({\n      editMode: !state.editMode,\n    }))\n  }\n\n  // This method will toggle the a block style\n  handleToggleBlockStyle = (block) => {\n    // const checkStyle = (style === 'UL' ? 'unordered-list-item' : style === 'OL' ? 'ordered-list-item' : style.toUpperCase() )\n    this.onEditorChange(RichUtils.toggleBlockType(this.state.editorState, block))\n  }\n  \n  // This method will either toggle a style or remove it then apply the new one if the style is any of the values from the array\n  handleToggleStyle = (style) => {\n    const checkStylesArray = ['14', '16', '24', '32', '40', '64', '96', \"INHERIT\", \"#9E9E9E\", \"#F44336\", \"#E91E63\", \"#9C27B0\", \"#2196F3\", \"#4CAF50\", \"#FFC107\", \"#FF9800\", 'TRANSPARENT', '#C62828', '#AD1457', '#6A1B9A', '#1565C0', '#2E7D32', '#FF8F00', '#EF6C00', '#795548'];\n\n    if(checkStylesArray.includes(style)){\n      this.handleToggleRemoveStyle(style);\n    }else{\n      this.onEditorChange(RichUtils.toggleInlineStyle(this.state.editorState, style))\n    }\n  }\n\n  // This method will remove the current style from the selected text \n  handleToggleRemoveStyle = (style) => {\n    const currentEditorState = this.state.editorState;\n    const fontSize = ['14', '16', '24', '32', '40', '64', '96'];\n    const fontColor = [\"INHERIT\", \"#9E9E9E\", \"#F44336\", \"#E91E63\", \"#9C27B0\", \"#2196F3\", \"#4CAF50\", \"#FFC107\", \"#FF9800\"]\n    const highlighterColor = [\"TRANSPARENT\", \"#C62828\", \"#AD1457\", \"#6A1B9A\", \"#1565C0\", \"#2E7D32\", \"#FF8F00\", \"#EF6C00\", \"#795548\"];\n    let previousStyle;\n\n    if(fontSize.includes(style)){\n      previousStyle = this.state.fontSize;\n\n      this.setState({\n        fontSize: style\n      })\n    }else if(fontColor.includes(style)){\n      previousStyle = this.state.fontColor;\n\n      this.setState({\n        fontColor: style\n      })\n    }else if(highlighterColor.includes(style)){\n      previousStyle = this.state.highlighterColor;\n\n      this.setState({\n        highlighterColor: style\n      })\n    }\n\n    const selectionState = currentEditorState.getSelection();\n    const contentState = currentEditorState.getCurrentContent();\n\n    const removePreviousStyle = Modifier.removeInlineStyle(\n      contentState,\n      selectionState,\n      previousStyle\n    );\n      \n    const removePreviousStyleBlock = removePreviousStyle.getBlockMap();\n    \n    const newInlineStyle = Modifier.mergeBlockData(removePreviousStyle, selectionState, removePreviousStyleBlock);\n    const newEditorState = EditorState.push(currentEditorState, removePreviousStyle, newInlineStyle);\n\n    this.handleToggleApplyStyle(newEditorState, style);\n  }\n\n  // This method will apply the style chosen to the selected text\n  handleToggleApplyStyle = (editorState, style) => {\n    const newEditorState = editorState;\n\n    const selectionState = newEditorState.getSelection();\n    const contentState = newEditorState.getCurrentContent();\n\n    const applyNewStyle = Modifier.applyInlineStyle(\n      contentState,\n      selectionState,\n      style\n    );\n      \n    const applyNewStyleBlock = applyNewStyle.getBlockMap();\n    \n    const newInlineStyle = Modifier.mergeBlockData(applyNewStyle, selectionState, applyNewStyleBlock);\n    const updateEditorState = EditorState.push(newEditorState, applyNewStyle, newInlineStyle);\n\n    this.setState({\n      editorState: updateEditorState,\n    });\n  }\n\n  // This method will set the cursor at the end of the editor\n  handleCursorSetAtEnd = (editorState) => {\n    const currentEditorState = editorState === null ? this.state.editorState : editorState;\n\n    this.setState({\n      editorState: EditorState.moveFocusToEnd(currentEditorState)\n    })\n  }\n\n  // This method will clear the editor\n  // handleClickClearEditor = () => {\n  //   const newEditorState = EditorState.createEmpty();\n\n  //   const selectionState = newEditorState.getSelection();\n  //   const contentState = newEditorState.getCurrentContent();\n\n  //   const contentBlock = contentState.getBlockMap();\n  \n  //   const newBlock = Modifier.setBlockData(contentState, selectionState, contentBlock);\n  //   const updateEditorState = EditorState.push(newEditorState, contentState, newBlock);\n\n  //   this.setState({\n  //     editorState: updateEditorState,\n  //   })\n  // }\n\n  onClickCancelEditor = () => {\n    this.setState(state => ({\n      editMode: !state.editMode,\n    }))\n  }\n\n  handleClickClearFormatting = (key, editorStateParmater) => {\n    // const editorState = editorStateParmater;\n    // const selectionState = editorState.getSelection();\n  \n    // const contentState = editorState.getCurrentContent();\n    // const contentBlock = contentState.getBlockForKey(key);\n    // const characterList = contentBlock.getCharacterList();\n    \n    // const updatedCharacterList = characterList.map(c => {\n    //   return c.set('style', c.get('style').clear())\n    // });\n    \n    // const updatedBlock = contentBlock.set('characterList', updatedCharacterList);\n    // const newContentState = contentState.set('blockMap', updatedBlock);\n    \n    // const contentBlockMap = contentState.getBlockMap();\n\n    // // const newBlock = Modifier.mergeBlockData(newContentState, selectionState, contentBlockMap);\n    // // const newEditorState = EditorState.createWithContent(newContentState);\n    // // const newContentState = newEditorState.getCurrentContent();\n\n    // // console.log(newBlock);\n\n    // this.onEditorChange(EditorState.push(editorState, newContentState, 'unstyled'))\n\n    // // this.setState({\n    // //   editorState: newEditorState\n    // // })\n  }\n  \n  // This method will turn the text into a working link\n  handleClickToggleLink = (url) => {\n    const editorState = this.state.editorState;\n    const selectionState = editorState.getSelection();\n\n    const contentState = editorState.getCurrentContent();\n    const contentWithEntity = contentState.createEntity('LINK', 'MUTABLE', { url: url });\n    const newEditorState = EditorState.push(editorState, contentWithEntity, 'create-entity');\n    const entityKey = contentWithEntity.getLastCreatedEntityKey();\n\n    this.onEditorChange(RichUtils.toggleLink(newEditorState, selectionState, entityKey));\n  }\n\n  handleClickSave = () => {\n    const date = new Date();\n    const currentNotes = [...this.state.notes];\n    const currentNote = this.state.currentNote;\n\n    const noteData = convertToRaw(this.state.editorState.getCurrentContent());\n\n    const contentBlock = noteData.blocks[0];\n    const contentText = contentBlock.text;\n    const contentTextArray = contentText.split(\" \");\n\n    const title = contentTextArray[0];\n\n    const titleArray = title.split(\"\");\n    const newTitleArray = titleArray.slice(0, 12);\n    const newTitle = newTitleArray.join(\"\");\n\n    const drawerTitle = `${newTitle}...`;\n\n    const day = date.getDate()\n    const month = date.getMonth()\n    const year = date.getFullYear()\n\n    const fullDate = `${month}/${day}/${year}`;\n\n    let newNote;\n    let newNotes = [];\n\n    if(currentNote === null){\n      newNote = {\n        id: Math.random(),\n        title: title,\n        titleDrawer: drawerTitle,\n        date: fullDate,\n        password: \"\",\n        locked: false,\n        data: noteData\n      }\n\n      newNotes = [...currentNotes];\n      newNotes.push(newNote);\n    }else{\n      newNote = {\n        id: currentNote.id,\n        title: title,\n        titleDrawer: drawerTitle,\n        date: fullDate,\n        password: currentNote.password,\n        locked: currentNote.locked,\n        data: noteData\n      }\n\n      newNotes = currentNotes.map(item => {\n        return item.id === newNote.id ? item = newNote : item\n      })\n    }\n\n    // Setting the Alarms array into our local storage\n    localStorage.setItem(\"Notes\", JSON.stringify(newNotes));\n\n    this.setState(state => ({\n      currentNote: currentNote,\n      editMode: !state.editMode,\n      notes: newNotes\n    }))\n  }\n\n  handleClickClearNotes = () => {\n    // Deleting the Notes item from local storage\n    localStorage.removeItem(\"Notes\")\n\n    this.setState({\n      notes: []\n    })\n  }\n\n  handleClickToggleLock = (id, password, type) => {\n    // Getting the current state of notes array\n    const currentNotes = [...this.state.notes];\n    \n    const newNotes = currentNotes.map(item => {\n      if(item.id === id){\n        if(type === \"turnOn\"){\n          item.password = password;\n        }else{\n          item.password = \"\";\n        }\n        item.locked = !item.locked;\n      }\n      return item\n    })\n\n    // Setting the Notes array into our local storage\n    localStorage.setItem(\"Notes\", JSON.stringify(newNotes));\n\n    this.setState({\n      notes: newNotes\n    })\n  }\n  \n  // This method will delete the note from the notes array\n  handleClickDeleteNote = (id) => {\n    const itemId = id;\n\n    // Getting the current state of notes array\n    const currentNotes = [...this.state.notes];\n\n    // Remove the item from the new notes array\n    const newNotes = currentNotes.filter(item => {\n        return item.id !== itemId\n    });\n\n    // Setting the Notes array into our local storage\n    localStorage.setItem(\"Notes\", JSON.stringify(newNotes));\n\n    this.setState({\n        notes: newNotes,\n    })\n  }\n\n  handleClickOpenNote = (type, note) => {\n    if(type === \"New\"){\n      this.setState(state => ({\n        currentNote: null,\n        noteTitle: \"New Note\",\n        editorState: EditorState.createEmpty(this.decorator),\n      }))\n    }else{\n      const data = convertFromRaw(note.data);\n\n      this.setState({\n        currentNote: note,\n        noteTitle: note.title,\n        editorState: EditorState.createWithContent(data)\n      })\n    }\n  }\n  \n  render(){\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        <ThemeProvider theme={theme}>\n          <Container className='Container' maxWidth='md' disableGutters>\n            <Header \n              editMode={this.state.editMode}\n              currentNote={this.state.currentNote}\n              notes={this.state.notes}\n              onClickSave={this.handleClickSave} \n              onClickEditMode={this.handleClickEditMode} \n              // onClickClearEditor={this.handleClickClearEditor}\n              onClickCancelEditor={this.onClickCancelEditor}\n              onClickClearNotes={this.handleClickClearNotes} \n              onClickToggleLock={this.handleClickToggleLock} \n              onClickDeleteNote={this.handleClickDeleteNote} \n              onClickOpenNote={this.handleClickOpenNote} \n            />\n            <Box m={2}>\n              <Editor \n                customStyleMap={inlineStyles}\n                blockStyleFn={blockStyles}\n                // blockRenderMap={blockRenderMap}\n                editorState={this.state.editorState}\n                onChange={this.onEditorChange}\n                // plugins={[linkifyPlugin]}\n                ref={this.setDomEditorRef}\n                readOnly={!this.state.editMode}\n                spellCheck={true}\n                placeholder='Enter your thoughts...'\n              />\n              <Toolbar \n                editorState={this.state.editorState} \n                onClickToggleBlockStyle={this.handleToggleBlockStyle}\n                onClickToggleStyle={this.handleToggleStyle}\n                handleCursorSetAtEnd={this.handleCursorSetAtEnd}\n                onClickClearFormatting={this.handleClickClearFormatting}\n                onClickToggleLink={this.handleClickToggleLink}\n              />\n            </Box>\n          </Container>\n        </ThemeProvider>\n      </React.Fragment>\n    );\n  }\n}\n\n// Creating a new entity\nfunction findLinkEntities(contentBlock, callback, contentState) {\n  contentBlock.findEntityRanges(\n    (character) => {\n      const entityKey = character.getEntity();\n      return (\n        entityKey !== null &&\n        contentState.getEntity(entityKey).getType() === 'LINK'\n      );\n    },\n    callback\n  );\n}\n\n// Creating an anchor tag\nconst Link = (props) => {\n  const { contentState, entityKey } = props;\n  const { url } = contentState.getEntity(entityKey).getData();\n  return (\n    <a\n      className=\"Link\"\n      href={url}\n      rel=\"noopener noreferrer\"\n      target=\"_blank\"\n      aria-label={url}\n    >{props.children}</a>\n  );\n};","// Polyfill for Draft JS \n// import 'babel-polyfill';\n\n// React library\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Components\nimport App from './container/App';\n\n// Style sheet\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}